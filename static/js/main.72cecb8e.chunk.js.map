{"version":3,"sources":["context/reducers/driverReducer.js","context/GlobalState.js","context/reducers/statusReducer.js","routes/planner/driverPanel/DriverContainerStatus.js","reusable_components/IconButton.js","custom_hooks/useBlurEdit.js","routes/planner/PassengerContainer.js","routes/planner/driverPanel/DriverContainerCard.js","reusable_components/Modal.js","custom_hooks/useFormData.js","routes/planner/driverPanel/modals/AddDriver.js","routes/planner/driverPanel/modals/Link.js","routes/planner/driverPanel/modals/EditDriver.js","routes/planner/driverPanel/DriverContainer.js","routes/planner/passengerPanel/AddPassengerModal.js","routes/planner/passengerPanel/UnassignedContainer.js","routes/planner/Planner.js","App.js","serviceWorker.js","index.js"],"names":["driverReducer","state","action","drivers","type","driverList","passengerData","passengerRows","driverColumns","forEach","driver","push","passengers","id","name","nickname","seats","passengerIds","Array","from","passenger","columnOrder","pop","uuidv4","newPassenger","driverId","unassignedPassengers","formData","driverName","driverNickname","driverSeats","allDrivers","parseInt","updatedDriver","itemId","fieldName","value","filter","passengerId","item","newPassengerIds","source","droppableId","splice","index","destination","draggableId","sourceColumn","endColumn","length","alert","Error","CarpoolContext","React","createContext","initialData","GlobalState","children","useReducer","updateDriverList","useEffect","Provider","statusReducer","reducer","accumulator","currentValue","seatCountArray","usedSeatsArray","columnId","driverData","emptyCars","usedSeatCount","reduce","maxSeats","DriverStatusBar","status","updateStatus","useContext","className","IconButton","handleClick","icon","onClick","useBlurEdit","handleBlurEdit","e","original","target","handleKeyEdit","keyCode","blur","PassengerTileContainer","isDraggingOver","handleUpdate","innerRef","placeholder","ref","map","i","toString","key","provided","draggableProps","dragHandleProps","rows","defaultValue","spellCheck","maxLength","onBlur","onKeyDown","DriverCard","totalSeats","toggleEditDriver","updateDriverBeingEdited","useState","seatCapacityBar","updateCapacityBar","style","width","snapshot","droppableProps","Modal","isVisible","handleVisibility","require","useFormData","setFormData","handleInputChange","AddDriverModal","handleAdd","onSubmit","preventDefault","reset","handleSubmit","htmlFor","onChange","required","LinkModal","href","EditDriverModal","occupied","isOverCapacity","setCapacityStatus","disabled","DriverContainer","isAddingDriver","toggleAddModal","isViewingRestLink","toggleRestLink","isEditingDriver","driverBeingEdited","AddDriver","Link","EditDriver","DriverContainerStatus","AddPassengerModal","nameRef","useRef","nicknameRef","driverOptions","current","focus","passengerName","passengerNickname","Passengers","isAddingPassenger","toggleAddPassenger","PassengerContainer","Planner","onDragEnd","result","start","end","UnassignedContainer","App","Boolean","window","location","hostname","match","library","add","faTrash","faUserEdit","faLink","faPlus","faTimes","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.72cecb8e.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\r\n\r\nexport default function driverReducer(state, action) {\r\n\tlet drivers = {...state};\r\n\tswitch (action.type) {\r\n\t\tcase 'INIT': {\r\n\t\t\tconst driverList = [...action.drivers];\r\n\t\t\t// These will hold the values needed for our datastructure \r\n\t\t\tlet passengerData = []; \r\n\t\t\tlet passengerRows = {};\r\n\t\t\tlet driverColumns = {};\r\n\t\r\n\t\t\tdriverList.forEach(driver => {\r\n\t\t\t\tpassengerData.push(...driver.passengers)\r\n\t\t\t\tdriverColumns = {...driverColumns,\r\n\t\t\t\t\t[driver.id]: {\r\n\t\t\t\t\t\tid: driver.id,\r\n\t\t\t\t\t\tname: driver.name,\r\n\t\t\t\t\t\tnickname: driver.nickname,\r\n\t\t\t\t\t\tseats: driver.seats,\r\n\t\t\t\t\t\tpassengerIds: Array.from(driver.passengers, passenger => passenger.id)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\r\n\t\t\tpassengerData.forEach(passenger => {\r\n\t\t\t\tpassengerRows = {\r\n\t\t\t\t\t...passengerRows,\r\n\t\t\t\t\t[passenger.id]: {id: passenger.id, name: passenger.name, nickname: passenger.nickname}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\r\n\t\t\tconst columnOrder = Array.from(driverList, driver => driver.id);\r\n\t\t\tcolumnOrder.pop(); // So the column of passengers is not included in the driverList\r\n\r\n\t\t\tconst driverData = {\r\n\t\t\t\tpassengerRows,\r\n\t\t\t\tdriverColumns,\r\n\t\t\t\tcolumnOrder\r\n\t\t\t}\r\n\t\t\treturn driverData;\r\n\t\t}\r\n\r\n\t\tcase 'ADD_PASSENGER': {\r\n\t\t\tconst id = uuidv4();\r\n\t\t\tconst newPassenger = {\r\n\t\t\t\tid,\r\n\t\t\t\tname: action.name,\r\n\t\t\t\tnickname: action.nickname || null\r\n\t\t\t}\r\n\r\n\t\t\t// Add to combined passenger pool\r\n\t\t\tdrivers.passengerRows = {\r\n\t\t\t\t...drivers.passengerRows, \r\n\t\t\t\t[id]: newPassenger\r\n\t\t\t}\r\n\r\n\t\t\t// Add to a specific passenger column\r\n\t\t\tif (!action.driverId) {\r\n\t\t\t\tconst unassignedPassengers = drivers.driverColumns.unassignedPassengers;\r\n\t\t\t\tunassignedPassengers.passengerIds.push(id);\r\n\t\t\t} else {\r\n\t\t\t\tconst driver = drivers.driverColumns[action.driverId];\r\n\t\t\t\tdriver.passengerIds.push(id);\r\n\t\t\t}\r\n\r\n\t\t\treturn drivers\r\n\t\t}\r\n\r\n\t\tcase 'ADD_DRIVER': {\r\n\t\t\t// Normally, we would get the ID from mongoDB (perform a POST request, and get the driver's ID, then assign it to the new driver)\r\n\t\t\tlet {driverName, driverNickname, driverSeats} = action.formData; // Destructure the form data\r\n\t\t\tlet allDrivers = drivers.driverColumns; // Get the drivers object of the state\r\n\t\t\tlet columnOrder = drivers.columnOrder;\r\n\t\t\tlet id = uuidv4();\r\n\t\t\tallDrivers = {\r\n\t\t\t\t...allDrivers,\r\n\t\t\t\t[id]: {\r\n\t\t\t\t\tid,\r\n\t\t\t\t\tname: driverName,\r\n\t\t\t\t\tnickname: driverNickname,\r\n\t\t\t\t\tpassengerIds: [],\r\n\t\t\t\t\tseats: parseInt(driverSeats)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// We do 2 reassignments because we also need to update the column order\r\n\t\t\tdrivers = {\r\n\t\t\t\t...drivers,\r\n\t\t\t\tdriverColumns: allDrivers,\r\n\t\t\t\tcolumnOrder: [...columnOrder, id]\r\n\t\t\t}\r\n\t\t\treturn drivers;\r\n\t\t}\r\n\r\n\t\tcase 'EDIT_DRIVER_SEATS': {\r\n\t\t\tlet { driverSeats } = action.formData; \r\n\t\t\tlet updatedDriver = drivers.driverColumns[action.driverId];\r\n\t\t\t\r\n\t\t\tupdatedDriver = {\r\n\t\t\t\t...updatedDriver,\r\n\t\t\t\tseats: parseInt(driverSeats)\r\n\t\t\t}\r\n\r\n\t\t\tdrivers.driverColumns = {\r\n\t\t\t\t...drivers.driverColumns,\r\n\t\t\t\t[action.driverId]: updatedDriver\r\n\t\t\t}\r\n\t\t\treturn drivers;\r\n\t\t}\r\n\r\n\t\tcase 'EDIT_DRIVER_NAME': {\r\n\t\t\tlet driver = drivers.driverColumns[action.itemId];\r\n\t\t\tdriver = {\r\n\t\t\t\t...driver,\r\n\t\t\t\t[action.fieldName]: action.value || null \r\n\t\t\t}\r\n\t\t\tdrivers.driverColumns = {\r\n\t\t\t\t...drivers.driverColumns,\r\n\t\t\t\t[action.itemId]: driver\r\n\t\t\t}\r\n\t\t\treturn drivers\r\n\t\t}\r\n\r\n\t\tcase 'EDIT_PASSENGER': {\r\n\t\t\tlet passenger = drivers.passengerRows[action.itemId];\r\n\t\t\tpassenger = {\r\n\t\t\t\t...passenger,\r\n\t\t\t\t[action.fieldName]: action.value || null\r\n\t\t\t}\r\n\t\t\tdrivers.passengerRows = {\r\n\t\t\t\t...drivers.passengerRows,\r\n\t\t\t\t[action.itemId]: passenger\r\n\t\t\t}\r\n\t\t\treturn drivers;\r\n\t\t}\r\n\r\n\t\tcase 'DELETE_DRIVER': {\r\n\t\t\tdrivers.columnOrder = drivers.columnOrder.filter(id => id !== action.driverId);\r\n\t\t\tdelete drivers.driverColumns[action.driverId]\r\n\t\t\t// We still have the passengers stored in the passengerRows and we could probably reassign them to the passenger pool\r\n\t\t\treturn drivers;\r\n\t\t}\r\n\r\n\t\tcase 'DELETE_PASSENGER': {\r\n\t\t\tconst {passengerId, driverId} = action;\r\n\r\n\t\t\tlet driver = drivers.driverColumns[driverId]; \r\n\t\t\tlet passengers = driver.passengerIds;\r\n\t\t\tpassengers = passengers.filter(item => item !== passengerId);\r\n\t\t\tdriver.passengerIds = passengers;\r\n\r\n\t\t\t// Return passenger to list if they came from a driver\r\n\t\t\tif (driver.id !== \"unassignedPassengers\") {\r\n\t\t\t\tconst unassignedColumn = drivers.driverColumns.unassignedPassengers;\r\n\t\t\t\tconst passengerPool = unassignedColumn.passengerIds;\r\n\t\t\t\tpassengerPool.push(passengerId);\r\n\t\t\t}\r\n\r\n\t\t\t// Permanent passenger delete if the source is the unassigned passengers column\r\n\t\t\tif (driver.id === \"unassignedPassengers\") {\r\n\t\t\t\tconst passengerRows = drivers.passengerRows;\r\n\t\t\t\tdelete passengerRows[passengerId];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn drivers;\r\n\t\t}\r\n\r\n\t\tcase 'REORDER_PASSENGERS': {\r\n\t\t\tlet column = drivers.driverColumns[action.source.droppableId];\r\n\t\t\tconst newPassengerIds = column.passengerIds;\r\n\t\t\tnewPassengerIds.splice(action.source.index, 1);\r\n\t\t\tnewPassengerIds.splice(action.destination.index, 0, action.draggableId);\r\n\r\n\t\t\treturn drivers;\r\n\t\t}\r\n\r\n\t\tcase 'TRANSFER': {\r\n\t\t\tconst {source, destination, draggableId} = action;\r\n\r\n\t\t\tconst sourceColumn = drivers.driverColumns[source.droppableId];\r\n\t\t\tconst endColumn = drivers.driverColumns[destination.droppableId];\r\n\r\n\t\t\tif (destination.droppableId !== \"unassignedPassengers\" &&\r\n\t\t\t\t\tendColumn.passengerIds.length === endColumn.seats\r\n\t\t\t) {\r\n\t\t\t\talert('This car is full!');\r\n\t\t\t\treturn drivers;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tsourceColumn.passengerIds.splice(source.index, 1);\r\n\t\t\tendColumn.passengerIds.splice(destination.index, 0, draggableId);\r\n\r\n\t\t\treturn drivers;\r\n\t\t}\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error();\r\n\t}\r\n}","import React, { useReducer, useEffect } from 'react';\r\nimport driverReducer from '../context/reducers/driverReducer';\r\n\r\nexport const CarpoolContext = React.createContext();\r\n\r\nconst initialData = [\r\n\t{\r\n\tname: 'Jim Halpert',\r\n\tnickname: 'William M. Buttlicker',\r\n\tseats: 3,\r\n\tid: 'driver1',\r\n\tpassengers: [{name: 'Michael Scott', nickname: 'Prison Mike', id: 'pass1'}, {name: 'Dwight Schrute', nickname: null, id: 'pass2'}]\r\n\t},\r\n\t{\r\n\tname: 'driver2',\r\n\tnickname: null,\r\n\tseats: 3,\r\n\tid: 'driver2',\r\n\tpassengers: [{name: 'passX', nickname: null, id:'passX'}]\r\n\t},\r\n\t// This is a unique column. Handle with care!\r\n\t{\r\n\t\tname: 'unassignedPassengers',\r\n\t\tseats: null,\r\n\t\tid: 'unassignedPassengers',\r\n\t\tpassengers: [{name: 'pass3', nickname: null, id: 'pass3'}, {name: 'pass4', nickname: null, id: 'pass4'}]\r\n\t}\r\n];\r\n\r\n// Only includes state that is read at multiple levels of the app\r\nconst GlobalState = ({children}) => {\r\n\tconst [driverList, updateDriverList] = useReducer(driverReducer, {\r\n\t\tpassengerRows: {},\r\n\t\t// We include this placeholder object so the passengerList can parse through it without returning any errors\r\n\t\tdriverColumns: {\r\n\t\t\tunassignedPassengers: {\r\n\t\t\t\tid: \"unassignedPassengers\",\r\n\t\t\t\tname: \"unassignedPassengers\",\r\n\t\t\t\tpassengerIds: []\r\n\t\t\t}\r\n\t\t},\r\n\t\tcolumnOrder: []\r\n\t});\r\n\r\n\tfunction fakeApiCall() {\r\n\t\t// API call would go here, then we'd send the data to our reducer to process\r\n\t\tupdateDriverList({\r\n\t\t\ttype: 'INIT',\r\n\t\t\tdrivers: initialData\r\n\t\t})\r\n\t}\r\n\r\n\tuseEffect(() => fakeApiCall(), []);\r\n\r\n\treturn (\r\n\t\t<CarpoolContext.Provider \r\n\t\t\tvalue={{\r\n\t\t\t\tdriverList, \r\n\t\t\t\tupdateDriverList,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{children}\r\n\t\t</CarpoolContext.Provider>\r\n\t);\r\n}\r\n\r\nexport default GlobalState;\r\n\r\n","export default function statusReducer(state, action) {\r\n\tconst drivers = action.drivers;\r\n\tswitch(action.type) {\r\n\t\tcase 'UPDATE':\r\n\t\t\t// Handle the case for 0 drivers\r\n\t\t\tif (drivers.columnOrder.length === 0) {\r\n\t\t\t\treturn state\r\n\t\t\t} \r\n\r\n\t\t\t// Calculate the number of used and max seats\r\n\t\t\tconst reducer = (accumulator, currentValue) => accumulator + currentValue;\r\n\t\t\tlet seatCountArray = [];\r\n\t\t\tlet usedSeatsArray = [];\r\n\t\t\tdrivers.columnOrder.forEach(columnId => {\r\n\t\t\t\tlet driverData = drivers.driverColumns[columnId];\r\n\r\n\t\t\t\tusedSeatsArray.push(driverData.passengerIds.length); // Occupied seat count of each driver\r\n\t\t\t\tseatCountArray.push(parseInt(driverData.seats)); // Max seat count of each driver\r\n\t\t\t})\r\n\r\n\t\t\t// Determine if empty cars exist using the usedSeatsArray before reducing it\r\n\t\t\tlet emptyCars = false;\r\n\t\t\tfor (const element of usedSeatsArray) {\r\n\t\t\t\tif (element === 0) {\r\n\t\t\t\t\temptyCars = true;\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Count number of unoccupied seats\r\n\t\t\tconst unassignedPassengers = drivers.driverColumns.unassignedPassengers.passengerIds.length;\r\n\r\n\t\t\tlet usedSeatCount = usedSeatsArray.reduce(reducer);\r\n\t\t\tlet maxSeats = seatCountArray.reduce(reducer);\r\n\r\n\t\t\treturn {\r\n\t\t\t\tusedSeatCount,\r\n\t\t\t\tmaxSeats,\r\n\t\t\t\temptyCars,\r\n\t\t\t\tunassignedPassengers\r\n\t\t\t}\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error();\r\n\t}\r\n}","import React, { useEffect, useContext, useReducer } from 'react';\r\nimport { CarpoolContext } from '../../../context/GlobalState';\r\nimport statusReducer from '../../../context/reducers/statusReducer';\r\n\r\nconst DriverStatusBar = () => {\r\n\t// State is maintained here because it only needs to be used by this component\r\n\tconst [status, updateStatus] = useReducer(statusReducer, {\r\n\t\tusedSeatCount: 0,\r\n\t\tmaxSeats: 0,\r\n\t\temptyCars: false,\r\n\t\tunassignedPassengers: 0\r\n\t})\r\n\r\n\tconst {driverList} = useContext(CarpoolContext);\r\n\r\n\tuseEffect(() => updateStatus({type: 'UPDATE', drivers: driverList}), [driverList]);\r\n\r\n\treturn (\r\n\t\t<ul className=\"drivers__statusBar\">\r\n\t\t\t<li>\r\n\t\t\t\t<strong>{status.usedSeatCount}/{status.maxSeats} </strong>\r\n\t\t\t\tseats used\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t\t{status.emptyCars ? 'There are empty cars' : 'No empty cars'}\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t\t<strong>{status.unassignedPassengers} </strong>\r\n\t\t\t\tpeople need rides\r\n\t\t\t</li>\r\n\t\t\t{/* <button>Auto-assign</button> */}\r\n\t\t</ul>\r\n\t);\r\n}\r\n\r\nexport default DriverStatusBar;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst IconButton = ({handleClick, icon}) => {\r\n\treturn (\r\n\t\t<button \r\n\t\t\tclassName=\"iconButton\"\r\n\t\t\tonClick={handleClick}\r\n\t\t>\r\n\t\t\t<FontAwesomeIcon \r\n\t\t\t\ticon={icon} \r\n\t\t\t/>\r\n\t\t</button>\r\n\t);\r\n}\r\n\r\nIconButton.propTypes = {\r\n\thandleClick: PropTypes.func,\r\n\ticon: PropTypes.string.isRequired\r\n}\r\n\r\nexport default IconButton;\r\n","import { useContext } from 'react';\r\nimport { CarpoolContext } from '../context/GlobalState';\r\n\r\nexport default function useBlurEdit() {\r\n\r\n\t// The title can just be separated from this\r\n\r\n\tconst { updateDriverList } = useContext(CarpoolContext);\r\n\r\n\tconst handleBlurEdit = (e, original, type, columnId, itemId) => {\r\n\t\t// To prevent accidental deletion\r\n\t\tif (e.target.value.length === 0) {\r\n\t\t\t// To be able to clear nicknames\r\n\t\t\tif (e.target.name !== \"nickname\") {\r\n\t\t\t\te.target.value = original;\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t\tupdateDriverList({\r\n\t\t\ttype,\r\n\t\t\tcolumnId,\r\n\t\t\titemId,\r\n\t\t\tfieldName: e.target.name,\r\n\t\t\tvalue: e.target.value\r\n\t\t});\r\n\t}\r\n\r\n\tconst handleKeyEdit = (e) => {\r\n\t\tif (e.keyCode === 13) { // keyCode 13 is the enter key\r\n\t\t\te.target.blur();\r\n\t\t} \r\n\t}\r\n\r\n\treturn {\r\n\t\thandleBlurEdit,\r\n\t\thandleKeyEdit\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport IconButton from '../../reusable_components/IconButton';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport useBlurEdit from '../../custom_hooks/useBlurEdit';\r\n\r\n// NOTE: This component is shared beteen the DriverContainer and UnassignedContainer components\r\nconst PassengerTileContainer = ({isDraggingOver, handleUpdate, driverId, passengers, innerRef, placeholder}) => {\r\n\tconst { handleBlurEdit, handleKeyEdit } = useBlurEdit();\r\n\r\n\treturn (\r\n\t\t<div \r\n\t\t\tclassName={isDraggingOver ? \"passengerTiles--isDraggingOver\" : \"passengerTiles\"}\r\n\t\t\tref={innerRef}\r\n\t\t>\r\n\t\t\t\t{passengers.map((passenger, i) =>\r\n\t\t\t\t\t// Each of these draggables is an individual passenger tile\r\n\t\t\t\t\t<Draggable\r\n\t\t\t\t\t\tdraggableId={passenger.id.toString()}\r\n\t\t\t\t\t\tindex={i}\r\n\t\t\t\t\t\tkey={passenger.id}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{(provided) => (\r\n\t\t\t\t\t\t\t<div \r\n\t\t\t\t\t\t\t\t{...provided.draggableProps}\r\n\t\t\t\t\t\t\t\tref={provided.innerRef}\r\n\t\t\t\t\t\t\t\tkey={passenger.id} \r\n\t\t\t\t\t\t\t\tid={passenger.id} \r\n\t\t\t\t\t\t\t\tclassName=\"passengerTiles__card\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<div {...provided.dragHandleProps}>\r\n\t\t\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\t\t\tclassName=\"grippy\"\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<textarea\r\n\t\t\t\t\t\t\t\t\trows=\"1\"\r\n\t\t\t\t\t\t\t\t\tdefaultValue={passenger.name}\r\n\t\t\t\t\t\t\t\t\tspellCheck={false}\r\n\t\t\t\t\t\t\t\t\tmaxLength=\"20\"\r\n\t\t\t\t\t\t\t\t\tname=\"name\"\r\n\t\t\t\t\t\t\t\t\tonBlur={(e) => handleBlurEdit(e, passenger.name, 'EDIT_PASSENGER', driverId, passenger.id )} // Need columnID, itemID\r\n\t\t\t\t\t\t\t\t\tonKeyDown={handleKeyEdit}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\t\t\thandleClick={() => handleUpdate({\r\n\t\t\t\t\t\t\t\t\ttype: 'DELETE_PASSENGER', \r\n\t\t\t\t\t\t\t\t\tdriverId: driverId, \r\n\t\t\t\t\t\t\t\t\tpassengerId: passenger.id\r\n\t\t\t\t\t\t\t\t\t})} \r\n\t\t\t\t\t\t\t\ticon=\"trash\" \r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<textarea\r\n\t\t\t\t\t\t\t\t\trows=\"1\"\r\n\t\t\t\t\t\t\t\t\tdefaultValue={passenger.nickname}\r\n\t\t\t\t\t\t\t\t\tspellCheck={false}\r\n\t\t\t\t\t\t\t\t\tmaxLength=\"20\"\r\n\t\t\t\t\t\t\t\t\tname=\"nickname\"\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"(no nickname)\"\r\n\t\t\t\t\t\t\t\t\tonBlur={(e) => handleBlurEdit(e, passenger.nickname, 'EDIT_PASSENGER', driverId, passenger.id)}\r\n\t\t\t\t\t\t\t\t\tonKeyDown={handleKeyEdit}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div> \r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Draggable>\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\t{placeholder}\r\n\t\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default PassengerTileContainer;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport PassengerTileContainer from '../PassengerContainer';\r\nimport IconButton from '../../../reusable_components/IconButton';\r\nimport { CarpoolContext } from '../../../context/GlobalState';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport PropTypes from 'prop-types';\r\nimport useBlurEdit from '../../../custom_hooks/useBlurEdit';\r\n\r\nconst DriverCard = ({name, nickname, id, passengers, totalSeats, toggleEditDriver, updateDriverBeingEdited}) => {\r\n\tconst [seatCapacityBar, updateCapacityBar] = useState(0); // Capacity bar width\r\n\tconst {updateDriverList} = useContext(CarpoolContext);\r\n\tconst { handleBlurEdit, handleKeyEdit } = useBlurEdit();\r\n\r\n\tuseEffect(() => updateCapacityBar((passengers.length / totalSeats) * 100), [passengers.length, totalSeats]);\r\n\r\n\tfunction callEditModal() {\r\n\t\ttoggleEditDriver(true);\r\n\t\tupdateDriverBeingEdited({\r\n\t\t\ttotalSeats,\r\n\t\t\tpassengers, // So we can determine if passengers are still in the car\r\n\t\t\tid\r\n\t\t})\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"driversCard\">\r\n\t\t\t<div className=\"driversCard__headerTop\">\r\n\t\t\t\t{/* Maybe we can turn these textareas into reusable components? */}\r\n\t\t\t\t{/* Maybe the custom component can use the custom hook */}\r\n\t\t\t\t{/* We can always refactor this later */}\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tdefaultValue={name}\r\n\t\t\t\t\tname=\"name\"\r\n\t\t\t\t\trows=\"1\"\r\n\t\t\t\t\tclassName=\"driversCard__name\"\r\n\t\t\t\t\tspellCheck={false}\r\n\t\t\t\t\tmaxLength=\"20\"\r\n\t\t\t\t\tonKeyDown={handleKeyEdit}\r\n\t\t\t\t\tonBlur={(e) => handleBlurEdit(e, name, 'EDIT_DRIVER_NAME', id, id)}\r\n\t\t\t\t/>\r\n\t\t\t\t<IconButton\r\n\t\t\t\t\ticon=\"user-edit\"\r\n\t\t\t\t\thandleClick={callEditModal}\r\n\t\t\t\t\t/>\r\n\t\t\t\t<textarea \r\n\t\t\t\t\tdefaultValue={nickname}\r\n\t\t\t\t\tspellCheck={false}\r\n\t\t\t\t\tname=\"nickname\"\r\n\t\t\t\t\tplaceholder=\"(no nickname)\"\r\n\t\t\t\t\trows=\"1\"\r\n\t\t\t\t\tmaxLength=\"20\"\r\n\t\t\t\t\tonKeyDown={handleKeyEdit}\r\n\t\t\t\t\tonBlur={(e) => handleBlurEdit(e, nickname, 'EDIT_DRIVER_NAME', id, id)}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"driversCard__headerBottom\">\r\n\t\t\t\t<p>({passengers.length}/{totalSeats})</p>\r\n\t\t\t\t<div className=\"driversCard__percentBarContainer\">\r\n\t\t\t\t\t<div \r\n\t\t\t\t\t\tclassName={`${seatCapacityBar} ` < 100 ? 'driversCard__percentBar--incomplete' : 'driversCard__percentBar--complete' }\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\twidth: `${seatCapacityBar}%`,\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<Droppable\r\n\t\t\t\tdroppableId={id.toString()}\r\n\t\t\t>\r\n\t\t\t\t{(provided, snapshot) => (\r\n\t\t\t\t\t<PassengerTileContainer\r\n\t\t\t\t\t\t{...provided.droppableProps}\r\n\t\t\t\t\t\tinnerRef={provided.innerRef}\r\n\t\t\t\t\t\tpassengers={passengers}\r\n\t\t\t\t\t\thandleUpdate={updateDriverList}\r\n\t\t\t\t\t\tdriverId={id}\r\n\t\t\t\t\t\tplaceholder={provided.placeholder}\r\n\t\t\t\t\t\tisDraggingOver={snapshot.isDraggingOver}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t</PassengerTileContainer>\r\n\t\t\t\t)}\r\n\t\t\t</Droppable>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nDriverCard.propTypes = {\r\n\tname: PropTypes.string.isRequired,\r\n\tnickname: PropTypes.string,\r\n\tid: PropTypes.string.isRequired,\r\n\tpassengers: PropTypes.array.isRequired,\r\n\ttotalSeats: PropTypes.number.isRequired,\r\n\ttoggleEditDriver: PropTypes.func.isRequired,\r\n\tupdateDriverBeingEdited: PropTypes.func.isRequired\r\n}\r\n\r\nexport default DriverCard;\r\n","import React from 'react';\r\nimport IconButton from './IconButton';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Modal = ({children, isVisible, handleVisibility}) => {\r\n\treturn (\r\n\t\t<div \r\n\t\t\tclassName={isVisible ? 'modal--visible' : 'modal'} \r\n\t\t>\r\n\t\t\t<div \r\n\t\t\t\tclassName=\"modal__content\"\r\n\t\t\t>\r\n\t\t\t\t<div \r\n\t\t\t\t\tclassName=\"modal__close\" \r\n\t\t\t\t\tonClick={() => handleVisibility(false)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<IconButton \r\n\t\t\t\t\t\ticon=\"times\" \r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t\t{children}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nModal.propTypes = {\r\n\tisVisible: PropTypes.bool.isRequired,\r\n\thandleVisibility: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Modal;\r\n","const { useState } = require('react');\r\n\r\nexport default function useFormData() {\r\n\tconst [formData, setFormData] = useState({});\r\n\r\n\tfunction handleInputChange(e) {\r\n\t\tconst target = e.target;\r\n\t\tconst {name, value} = target;\r\n\t\tsetFormData({\r\n\t\t\t...formData,\r\n\t\t\t[name]: value\r\n\t\t})\r\n\t}\r\n\r\n\treturn {\r\n\t\tformData,\r\n\t\tsetFormData,\r\n\t\thandleInputChange\r\n\t}\r\n}","import React from 'react';\r\nimport Modal from '../../../../reusable_components/Modal';\r\nimport useFormData from '../../../../custom_hooks/useFormData';\r\n\r\nconst AddDriverModal = ({isVisible, handleVisibility, handleAdd}) => {\r\n\tconst {formData, setFormData, handleInputChange} = useFormData();\r\n\r\n\tfunction handleSubmit(e) {\r\n\t\te.preventDefault()\r\n\t\te.target.reset();\r\n\t\tsetFormData({});\r\n\t\treturn handleAdd({type: 'ADD_DRIVER', formData});\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Modal \r\n\t\t\t\tisVisible={isVisible} \r\n\t\t\t\thandleVisibility={handleVisibility}\r\n\t\t\t>\r\n\t\t\t\t<h1>Add Drivers</h1>\r\n\t\t\t\t<form onSubmit={(e) => handleSubmit(e)}>\r\n\t\t\t\t\t<label htmlFor=\"driverName\">Name: </label>\r\n\t\t\t\t\t<input \r\n\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\tname=\"driverName\" \r\n\t\t\t\t\t\tid=\"driverName_Add\" \r\n\t\t\t\t\t\tvalue={formData.driverName || ''} \r\n\t\t\t\t\t\tonChange={(e) => handleInputChange(e)} \r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t\tmaxLength=\"20\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<label htmlFor=\"driverNickname\">Nickname (optional): </label>\r\n\t\t\t\t\t<input \r\n\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\tname=\"driverNickname\" \r\n\t\t\t\t\t\tid=\"driverNickname_Add\"\r\n\t\t\t\t\t\tvalue={formData.driverNickname || ''}\r\n\t\t\t\t\t\tonChange={(e) => handleInputChange(e)}\r\n\t\t\t\t\t\tmaxLength=\"20\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t<label htmlFor=\"driverSeats\">Number of available seats: </label>\r\n\t\t\t\t\t<select \r\n\t\t\t\t\t\tname=\"driverSeats\" \r\n\t\t\t\t\t\tid=\"driverSeats_Add\" \r\n\t\t\t\t\t\tvalue={formData.driverSeats} \r\n\t\t\t\t\t\tonChange={(e) => handleInputChange(e)} \r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<option value=\"\">-</option>\r\n\t\t\t\t\t\t<option value=\"1\">1</option>\r\n\t\t\t\t\t\t<option value=\"2\">2</option>\r\n\t\t\t\t\t\t<option value=\"3\">3</option>\r\n\t\t\t\t\t\t<option value=\"4\">4</option>\r\n\t\t\t\t\t\t<option value=\"5\">5</option>\r\n\t\t\t\t\t\t<option value=\"6\">6</option>\r\n\t\t\t\t\t\t<option value=\"7\">7</option>\r\n\t\t\t\t\t</select>\r\n\t\t\t\t\t<input type=\"submit\" value=\"Add\"/>\r\n\t\t\t\t</form>\t\r\n\t\t\t</Modal>\r\n\t);\r\n}\r\n\r\nexport default AddDriverModal;\r\n","import React from 'react';\r\nimport Modal from '../../../../reusable_components/Modal';\r\n\r\nconst LinkModal = ({isVisible, handleVisibility}) => {\r\n\treturn (\r\n\t\t<Modal \r\n\t\t\tisVisible={isVisible} \r\n\t\t\thandleVisibility={handleVisibility}\r\n\t\t>\r\n\t\t\t<div className=\"modalMessage\">\r\n\t\t\t\t<h1>Sit back and relax.</h1>\r\n\t\t\t\t<strong><a href=\"#\">https://thisfeatureisntreadyyet.com/work-in-progress</a></strong>\r\n\t\t\t\t<p>Share this link with your attendees to allow them to sign up on their own!</p>\r\n\t\t\t\t<p>No account needed.</p>\r\n\t\t\t\t<p>They can sign up as a driver or passenger to an existing car.</p>\r\n\t\t\t</div>\r\n\t\t</Modal>\r\n\t);\r\n}\r\n\r\nexport default LinkModal;\r\n","import React, { useEffect, useContext, useState } from 'react';\r\nimport Modal from '../../../../reusable_components/Modal';\r\nimport useFormData from '../../../../custom_hooks/useFormData';\r\nimport { CarpoolContext } from '../../../../context/GlobalState';\r\n\r\nconst EditDriverModal = ({isVisible, handleVisibility, driver}) => {\r\n\tconst {formData, setFormData, handleInputChange} = useFormData();\r\n\tconst [ isOverCapacity, setCapacityStatus ] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\t// I use a && because the driver object is empty at first and causes an error if I dont include it\r\n\t\tif (driver.passengers && formData.driverSeats < driver.passengers.length) {\r\n\t\t\tsetCapacityStatus(true)\r\n\t\t} else {\r\n\t\t\tsetCapacityStatus(false)\r\n\t\t}\r\n\t}, [formData.driverSeats, driver.passengers])\r\n\r\n\t// This block is used for conditional rendering of the delete button\r\n\tlet occupied;\r\n\tif (driver.passengers && driver.passengers.length > 0) {\r\n\t\toccupied = true\r\n\t}\r\n\r\n\t// Auto-fill the form with the selected driver's data\r\n\tuseEffect(() => setFormData({\r\n\t\tdriverSeats: driver.totalSeats\r\n\t}), [driver, setFormData])\r\n\r\n\tconst { updateDriverList } = useContext(CarpoolContext);\r\n\r\n\tfunction handleSubmit(e) {\r\n\t\te.preventDefault();\r\n\t\tsetFormData({});\r\n\t\thandleVisibility(false);\r\n\t\tupdateDriverList({type: 'EDIT_DRIVER_SEATS', driverId: driver.id, formData})\r\n\t}\r\n\r\n\tfunction handleDeleteDriver() {\r\n\t\tsetFormData({});\r\n\t\thandleVisibility(false); // Immediately close the modal for better UX\r\n\t\tupdateDriverList({type: 'DELETE_DRIVER', driverId: driver.id})\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Modal \r\n\t\t\tisVisible={isVisible} \r\n\t\t\thandleVisibility={handleVisibility}\r\n\t\t\t>\r\n\t\t\t<h1>\r\n\t\t\t\tEdit seat count\r\n\t\t\t</h1>\r\n\t\t\t<form\r\n\t\t\t\tonSubmit={(e) => handleSubmit(e)}\r\n\t\t\t>\r\n\t\t\t\t<label \r\n\t\t\t\t\thtmlFor=\"driverSeats\"\r\n\t\t\t\t>\r\n\t\t\t\t\tNumber of available seats: \r\n\t\t\t\t</label>\r\n\t\t\t\t<select \r\n\t\t\t\t\tname=\"driverSeats\" \r\n\t\t\t\t\tid=\"driverSeats__Edit\"\r\n\t\t\t\t\tdefaultValue={driver.totalSeats}\r\n\t\t\t\t\tvalue={formData.driverSeats}\r\n\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t>\r\n\t\t\t\t\t<option value=\"1\">1</option>\r\n\t\t\t\t\t<option value=\"2\">2</option>\r\n\t\t\t\t\t<option value=\"3\">3</option>\r\n\t\t\t\t\t<option value=\"4\">4</option>\r\n\t\t\t\t\t<option value=\"5\">5</option>\r\n\t\t\t\t\t<option value=\"6\">6</option>\r\n\t\t\t\t\t<option value=\"7\">7</option>\r\n\t\t\t\t</select>\r\n\t\t\t\t{isOverCapacity && <p>You can't have less seats than passengers.</p>}\r\n\t\t\t\t<input \r\n\t\t\t\t\ttype=\"submit\" \r\n\t\t\t\t\tvalue=\"Update\"\r\n\t\t\t\t\tdisabled={isOverCapacity}\r\n\t\t\t\t/>\r\n\t\t\t\t{occupied ? \r\n\t\t\t\t<p>To delete this driver, remove their passengers first.</p> :\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\ttype=\"button\" \r\n\t\t\t\t\t\tonClick={handleDeleteDriver}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tDelete Driver\r\n\t\t\t\t\t</button>\r\n\t\t\t\t}\r\n\t\t\t</form>\t\r\n\t\t</Modal>\r\n\t);\r\n}\r\n\r\nexport default EditDriverModal;\r\n","import React, { useState, useContext } from 'react';\r\nimport DriverContainerStatus from './DriverContainerStatus';\r\nimport DriverCard from './DriverContainerCard';\r\nimport IconButton from '../../../reusable_components/IconButton';\r\nimport AddDriverModal from './modals/AddDriver';\r\nimport LinkModal from './modals/Link';\r\nimport EditDriverModal from './modals/EditDriver';\r\nimport { CarpoolContext } from '../../../context/GlobalState';\r\n\r\nconst DriverContainer = () => {\r\n\tconst [isAddingDriver, toggleAddModal] = useState(false);\r\n\tconst [isViewingRestLink, toggleRestLink] = useState(false);\r\n\tconst [isEditingDriver, toggleEditDriver] = useState(false);\r\n\tconst [driverBeingEdited, updateDriverBeingEdited] = useState({});\r\n\r\n\tconst { driverList, updateDriverList } = useContext(CarpoolContext);\r\n\r\n\treturn (\r\n\t\t<div className=\"planner__left\">\r\n\t\t\t<AddDriverModal\r\n\t\t\t\tisVisible={isAddingDriver}\r\n\t\t\t\thandleVisibility={toggleAddModal}\r\n\t\t\t\thandleAdd={updateDriverList}\r\n\t\t\t/>\r\n\t\t\t<LinkModal \r\n\t\t\t\tisVisible={isViewingRestLink}\r\n\t\t\t\thandleVisibility={toggleRestLink}\r\n\t\t\t/>\r\n\t\t\t<EditDriverModal \r\n\t\t\t\tisVisible={isEditingDriver}\r\n\t\t\t\thandleVisibility={toggleEditDriver}\r\n\t\t\t\tdriver={driverBeingEdited}\r\n\t\t\t/>\r\n\t\t\t<div className=\"drivers__header\">\r\n\t\t\t\t<h3>Manage Drivers</h3>\r\n\t\t\t\t<IconButton\r\n\t\t\t\t\ticon=\"link\"\r\n\t\t\t\t\thandleClick={() => toggleRestLink(true)}\r\n\t\t\t\t/>\r\n\t\t\t\t<IconButton \r\n\t\t\t\t\ticon=\"plus\"\r\n\t\t\t\t\thandleClick={() => toggleAddModal(true)}\t\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<DriverContainerStatus />\r\n\t\t\t<div className=\"drivers__container\">\r\n\t\t\t\t{driverList.columnOrder.map((columnId) => {\r\n\t\t\t\t\tconst driver = driverList.driverColumns[columnId];\r\n\t\t\t\t\tconst passengers = driver.passengerIds.map(passenger => driverList.passengerRows[passenger]);\r\n\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<DriverCard\r\n\t\t\t\t\t\t\tkey={columnId}\r\n\t\t\t\t\t\t\tid={columnId}\r\n\t\t\t\t\t\t\tname={driver.name}\r\n\t\t\t\t\t\t\tnickname={driver.nickname}\r\n\t\t\t\t\t\t\tpassengers={passengers}\r\n\t\t\t\t\t\t\ttotalSeats={driver.seats}\r\n\t\t\t\t\t\t\ttoggleEditDriver={toggleEditDriver}\r\n\t\t\t\t\t\t\tupdateDriverBeingEdited={updateDriverBeingEdited}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t</div>\r\n\t);\r\n}\r\n\r\nexport default DriverContainer;\r\n","import React, { useContext, useRef } from 'react';\r\nimport Modal from '../../../reusable_components/Modal';\r\nimport useFormData from '../../../custom_hooks/useFormData';\r\nimport { CarpoolContext } from '../../../context/GlobalState';\r\n\r\nexport default function AddPassengerModal({isVisible, handleVisibility}) {\r\n\tconst { formData, setFormData, handleInputChange } = useFormData();\r\n\tconst { updateDriverList, driverList } = useContext(CarpoolContext);\r\n\r\n\t// I use refs to improve the UX of this form by selectively resetting certain fields\r\n\tconst nameRef = useRef(null);\r\n\tconst nicknameRef = useRef(null);\r\n\t\r\n\tfunction handleAdd(e) {\r\n\t\te.preventDefault();\r\n\t\tconst driverId = formData.driverId;\r\n\t\tconst driver = driverList.driverColumns[driverId];\r\n\t\t// I include this block to preserve part of the state if the car isn't full, for better UX\r\n\t\tif (driver && driver.passengerIds.length === driver.seats) {\r\n\t\t\tsetFormData({})\r\n\t\t} else {\r\n\t\t\tsetFormData({\r\n\t\t\t\tdriverId: formData.driverId\r\n\t\t\t})\r\n\t\t}\r\n\t\tnameRef.current.focus();\r\n\t\tnameRef.current.value = \"\";\r\n\t\tnicknameRef.current.value = \"\";\r\n\r\n\t\treturn updateDriverList({\r\n\t\t\ttype: 'ADD_PASSENGER', \r\n\t\t\tname: formData.passengerName, \r\n\t\t\tnickname: formData.passengerNickname,\r\n\t\t\tdriverId: formData.driverId\r\n\t\t});\r\n\t}\r\n\r\n\t// The dropdown for directly assigning to a driver card\r\n\tconst driverOptions = driverList.columnOrder.map((id) => {\r\n\t\tconst driver = driverList.driverColumns[id];\r\n\t\tconst seatsTaken = driver.passengerIds.length;\r\n\t\tconst totalSeats = driver.seats;\r\n\r\n\t\t// To only show drivers with free seats\r\n\t\tif (seatsTaken < totalSeats) {\r\n\t\t\treturn (\r\n\t\t\t\t<option value={driver.id} key={driver.id}>\r\n\t\t\t\t\t{driver.name} ({driver.passengerIds.length}/{driver.seats})\r\n\t\t\t\t</option>\r\n\t\t\t)\r\n\t\t}\r\n\t\treturn\r\n\t});\r\n\r\n\treturn (\r\n\t\t<Modal\r\n\t\t\tisVisible={isVisible}\r\n\t\t\thandleVisibility={handleVisibility}\r\n\t\t>\r\n\t\t\t<h1>Add riders</h1>\r\n\t\t\t<form onSubmit={(e) => handleAdd(e)}>\r\n\t\t\t\t<label htmlFor=\"passengerName\">\r\n\t\t\t\t\t\tName:\r\n\t\t\t\t</label>\r\n\t\t\t\t<input \r\n\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\tname=\"passengerName\" \r\n\t\t\t\t\tid=\"passengerName\" \r\n\t\t\t\t\tvalue={formData.name}\r\n\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t\tmaxLength=\"20\"\r\n\t\t\t\t\tref={nameRef}\r\n\t\t\t\t\trequired\r\n\t\t\t\t/>\r\n\t\t\t\t<label htmlFor=\"passengerNickname\">\r\n\t\t\t\t\tNickname (optional):\r\n\t\t\t\t</label>\r\n\t\t\t\t<input \r\n\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\tname=\"passengerNickname\" \r\n\t\t\t\t\tid=\"passengerNickname\" \r\n\t\t\t\t\tvalue={formData.nickname}\r\n\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t\tref={nicknameRef}\r\n\t\t\t\t\tmaxLength=\"20\"\r\n\t\t\t\t/>\r\n\t\t\t\t<label htmlFor=\"driverId\">\r\n\t\t\t\t\tDirectly assign to car (optional):\r\n\t\t\t\t</label>\r\n\t\t\t\t<select \r\n\t\t\t\t\tname=\"driverId\" \r\n\t\t\t\t\tid=\"driverId\"\r\n\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t>\r\n\t\t\t\t\t<option value=\"\">\r\n\t\t\t\t\t\tnone\r\n\t\t\t\t\t</option>\r\n\t\t\t\t\t{driverOptions}\r\n\t\t\t\t</select>\r\n\t\t\t\t<button type=\"submit\">Add</button>\r\n\t\t\t</form>\r\n\t\t</Modal>\r\n\t)\r\n}\r\n","import React, { useContext, useState } from 'react';\r\nimport PassengerContainer from '../PassengerContainer';\r\nimport { CarpoolContext } from '../../../context/GlobalState';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport IconButton from '../../../reusable_components/IconButton';\r\nimport AddPassengerModal from './AddPassengerModal';\r\n\r\nconst Passengers = () => {\r\n\tconst { updateDriverList, driverList } = useContext(CarpoolContext);\r\n\tconst [isAddingPassenger, toggleAddPassenger] = useState(false);\r\n\r\n\tconst passengerIds = driverList.driverColumns.unassignedPassengers.passengerIds;\r\n\tconst passengerData = passengerIds.map(id => driverList.passengerRows[id]);\r\n\tconst columnId = \"unassignedPassengers\";\r\n\r\n\treturn ( \r\n\t\t<div className=\"passengersContainer\">\r\n\t\t\t<AddPassengerModal\r\n\t\t\t\tisVisible={isAddingPassenger}\r\n\t\t\t\thandleVisibility={toggleAddPassenger}\r\n\t\t\t/>\r\n\t\t\t<div className=\"passengersContainer__header\">\r\n\t\t\t\t<h3>Unassigned Riders</h3>\r\n\t\t\t\t<IconButton \r\n\t\t\t\t\ticon=\"plus\"\r\n\t\t\t\t\thandleClick={() => toggleAddPassenger(true)}\t\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t\t<Droppable\r\n\t\t\t\t\tdroppableId={columnId}\r\n\t\t\t\t>\r\n\t\t\t\t\t{(provided, snapshot) => (\r\n\t\t\t\t\t\t<PassengerContainer \r\n\t\t\t\t\t\t\t{...provided.droppableProps}\r\n\t\t\t\t\t\t\tinnerRef={provided.innerRef}\r\n\t\t\t\t\t\t\thandleUpdate={updateDriverList}\r\n\t\t\t\t\t\t\tpassengers={passengerData}\r\n\t\t\t\t\t\t\tplaceholder={provided.placeholder}\r\n\t\t\t\t\t\t\tdriverId={columnId}\r\n\t\t\t\t\t\t\tisDraggingOver={snapshot.isDraggingOver}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Droppable>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Passengers;\r\n","import React, { useContext } from 'react';\r\nimport DriverContainer from './driverPanel/DriverContainer';\r\nimport UnassignedContainer from './passengerPanel/UnassignedContainer';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\nimport { CarpoolContext } from '../../context/GlobalState';\r\n// import IconButton from '../reusable/IconButton';\r\n// import Navbar from '../reusable/Navbar';\r\n\r\n// TODO:\r\n// Clean up the code and organization\r\n\r\nconst Planner = () => {\r\n\tconst { updateDriverList } = useContext(CarpoolContext);\r\n\r\n\tconst onDragEnd = (result) => {\r\n\t\tconst {source, destination, draggableId} = result;\r\n\t\r\n\t\t// Outside drops\r\n\t\tif (!destination) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Drop in same place\r\n\t\tif (\r\n\t\t\t\tdestination.droppableId === source.droppableId &&\r\n\t\t\t\tdestination.index === source.index\r\n\t\t\t) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\tconst start = source.droppableId;\r\n\t\tconst end = destination.droppableId;\r\n\r\n\t\t// Drop in a different list\r\n\t\tif (start !== end) {\r\n\t\t\t\tupdateDriverList({\r\n\t\t\t\t\ttype: 'TRANSFER',\r\n\t\t\t\t\tsource, \r\n\t\t\t\t\tdestination,\r\n\t\t\t\t\tdraggableId\r\n\t\t\t\t})\r\n\t\t\t\treturn\r\n\t\t}\r\n\r\n\t\tupdateDriverList({\r\n\t\t\ttype: 'REORDER_PASSENGERS', \r\n\t\t\tsource, \r\n\t\t\tdestination,\r\n\t\t\tdraggableId\r\n\t\t})\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{/* <Navbar /> */}\r\n\t\t\t<div className=\"longTermPlanner\">\r\n\t\t\t\t<p>Ice Skating With Friends | February 12th, 2020 | 6:00pm {/* <span><IconButton icon=\"user-edit\"/></span> */}</p>\r\n\t\t\t\t<div className=\"longTermPlanner__cards\">\r\n\t\t\t\t\t<DragDropContext\r\n\t\t\t\t\t\tonDragEnd={onDragEnd}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<DriverContainer />\r\n\t\t\t\t\t\t<UnassignedContainer />\r\n\t\t\t\t\t</DragDropContext>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default Planner;\r\n","import React from 'react';\nimport Planner from './routes/planner/Planner';\nimport GlobalState from './context/GlobalState';\n// Eventually, this app will house your many routes\n\nfunction App() {\n  return (\n\t\t<GlobalState>\n\t\t\t<Planner />\n\t\t</GlobalState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './sass/main.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faTrash, faUserEdit, faLink, faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nlibrary.add(\r\n\tfaTrash, \r\n\tfaUserEdit, \r\n\tfaLink,\r\n\tfaPlus,\r\n\tfaTimes\r\n\t);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}