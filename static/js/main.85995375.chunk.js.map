{"version":3,"sources":["components/context/reducers/driverReducer.js","components/context/GlobalState.js","components/context/reducers/statusReducer.js","components/driverPanel/DriverStatusBar.js","components/reusable/IconButton.js","components/passengerPanel/PassengerTileContainer.js","components/driverPanel/DriverCard.js","components/reusable/Modal.js","hooks/useFormData.js","components/driverPanel/modals/AddDriverModal.js","components/driverPanel/modals/LinkModal.js","components/driverPanel/modals/EditDriverModal.js","components/driverPanel/DriverContainer.js","components/passengerPanel/PassengerContainer.js","components/Planner.js","App.js","serviceWorker.js","index.js"],"names":["driverReducer","state","action","drivers","type","driverList","passengerData","passengerRows","driverColumns","forEach","driver","push","passengers","id","name","seats","passengerIds","Array","from","passenger","columnOrder","pop","uuidv4","freePassengers","newPassenger","formData","driverName","driverSeats","allDrivers","parseInt","updatedDriver","driverId","filter","item","passengerId","newPassengerIds","source","droppableId","splice","index","destination","draggableId","sourceColumn","endColumn","length","alert","Error","CarpoolContext","React","createContext","initialData","GlobalState","children","useReducer","updateDriverList","useEffect","Provider","value","statusReducer","reducer","accumulator","currentValue","seatCountArray","usedSeatsArray","columnId","driverData","emptyCars","usedSeatCount","reduce","maxSeats","DriverStatusBar","status","updateStatus","useContext","className","IconButton","handleClick","icon","onClick","PassengerTileContainer","isDraggingOver","handleUpdate","innerRef","placeholder","console","log","ref","map","i","toString","key","provided","draggableProps","dragHandleProps","DriverCard","totalSeats","toggleEditDriver","updateDriverBeingEdited","useState","seatCapacityBar","updateCapacityBar","style","width","snapshot","droppableProps","Modal","isVisible","handleVisibility","require","useFormData","setFormData","handleInputChange","e","target","AddDriverModal","handleAdd","onSubmit","preventDefault","reset","handleSubmit","htmlFor","onChange","required","LinkModal","href","EditDriverModal","occupied","defaultValue","DriverContainer","isAddingDriver","toggleAddModal","isViewingRestLink","toggleRestLink","isEditingDriver","driverBeingEdited","Passengers","passengerName","Planner","onDragEnd","result","start","end","PassengerContainer","App","Boolean","window","location","hostname","match","library","add","faTrash","faUserEdit","faLink","faPlus","faTimes","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.85995375.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\r\n\r\nexport default function driverReducer(state, action) {\r\n\tlet drivers = {...state};\r\n\tswitch (action.type) {\r\n\t\tcase 'INIT': {\r\n\t\t\tconst driverList = [...action.drivers];\r\n\t\t\t// These will hold the values needed for our datastructure \r\n\t\t\tlet passengerData = []; \r\n\t\t\tlet passengerRows = {};\r\n\t\t\tlet driverColumns = {};\r\n\t\r\n\t\t\tdriverList.forEach(driver => {\r\n\t\t\t\tpassengerData.push(...driver.passengers)\r\n\t\t\t\tdriverColumns = {...driverColumns,\r\n\t\t\t\t\t[driver.id]: {\r\n\t\t\t\t\t\tid: driver.id,\r\n\t\t\t\t\t\tname: driver.name,\r\n\t\t\t\t\t\tseats: driver.seats,\r\n\t\t\t\t\t\tpassengerIds: Array.from(driver.passengers, passenger => passenger.id)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\r\n\t\t\tpassengerData.forEach(passenger => {\r\n\t\t\t\tpassengerRows = {\r\n\t\t\t\t\t...passengerRows,\r\n\t\t\t\t\t[passenger.id]: {id: passenger.id, name: passenger.name}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\r\n\t\t\tconst columnOrder = Array.from(driverList, driver => driver.id);\r\n\t\t\tcolumnOrder.pop(); // So the column of passengers is not included in the driverList\r\n\r\n\t\t\tconst driverData = {\r\n\t\t\t\tpassengerRows,\r\n\t\t\t\tdriverColumns,\r\n\t\t\t\tcolumnOrder\r\n\t\t\t}\r\n\t\t\treturn driverData;\r\n\t\t}\r\n\r\n\t\tcase 'ADD_PASSENGER': {\r\n\t\t\tconst id = uuidv4();\r\n\t\t\tconst freePassengers = drivers.driverColumns.freePassengers;\r\n\r\n\t\t\tconst newPassenger = {\r\n\t\t\t\tid,\r\n\t\t\t\tname: action.name\r\n\t\t\t}\r\n\t\t\t// Add to passenger pool\r\n\t\t\tdrivers.passengerRows = {\r\n\t\t\t\t...drivers.passengerRows, \r\n\t\t\t\t[id]: newPassenger\r\n\t\t\t}\r\n\t\t\t// Append to passenger column IDs\r\n\t\t\tfreePassengers.passengerIds.push(id);\r\n\t\t\treturn drivers\r\n\t\t}\r\n\r\n\t\tcase 'ADD_DRIVER': {\r\n\t\t\t// Normally, we would get the ID from mongoDB (perform a POST request, and get the driver's ID, then assign it to the new driver)\r\n\t\t\tlet {driverName, driverSeats} = action.formData; // Destructure the form data\r\n\t\t\tlet allDrivers = drivers.driverColumns; // Get the drivers object of the state\r\n\t\t\tlet columnOrder = drivers.columnOrder;\r\n\t\t\tlet id = uuidv4();\r\n\t\t\tallDrivers = {\r\n\t\t\t\t...allDrivers,\r\n\t\t\t\t[id]: {\r\n\t\t\t\t\tid,\r\n\t\t\t\t\tname: driverName,\r\n\t\t\t\t\tpassengerIds: [],\r\n\t\t\t\t\tseats: parseInt(driverSeats)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// We do 2 reassignments because we also need to update the column order\r\n\t\t\tdrivers = {\r\n\t\t\t\t...drivers,\r\n\t\t\t\tdriverColumns: allDrivers,\r\n\t\t\t\tcolumnOrder: [...columnOrder, [id]]\r\n\t\t\t}\r\n\t\t\treturn drivers;\r\n\t\t}\r\n\r\n\t\tcase 'EDIT': {\r\n\t\t\tlet {driverName, driverSeats} = action.formData; \r\n\t\t\tlet updatedDriver = drivers.driverColumns[action.driverId];\r\n\t\t\t// Update driver\r\n\t\t\tupdatedDriver = {\r\n\t\t\t\t...updatedDriver,\r\n\t\t\t\tname: driverName,\r\n\t\t\t\tseats: driverSeats\r\n\t\t\t}\r\n\t\t\t// Update state\r\n\t\t\tdrivers.driverColumns = {\r\n\t\t\t\t...drivers.driverColumns,\r\n\t\t\t\t[action.driverId]: updatedDriver\r\n\t\t\t}\r\n\t\t\treturn drivers;\r\n\t\t}\r\n\r\n\t\tcase 'DELETE': {\r\n\t\t\tdrivers.columnOrder = drivers.columnOrder.filter(id => id !== action.driverId);\r\n\t\t\tdelete drivers.driverColumns[action.driverId]\r\n\t\t\t// We still have the passengers stored in the passengerRows and we could probably reassign them to the passenger pool\r\n\t\t\treturn drivers;\r\n\t\t}\r\n\r\n\t\tcase 'DELETE_PASSENGER': {\r\n\t\t\t// After deleting, we still have the passengers in the passenger rows\r\n\t\t\t// TODO: Figure out what to do with them after we get feedback\r\n\t\t\tlet driver = drivers.driverColumns[action.driverId];\r\n\t\t\tlet passengers = driver.passengerIds;\r\n\t\t\tpassengers = passengers.filter(item => item !== action.passengerId);\r\n\t\t\tdriver.passengerIds = passengers;\r\n\t\t\t\r\n\t\t\treturn drivers;\r\n\t\t}\r\n\r\n\t\tcase 'REORDER_PASSENGERS': {\r\n\t\t\tlet column = drivers.driverColumns[action.source.droppableId];\r\n\t\t\tconst newPassengerIds = column.passengerIds;\r\n\t\t\tnewPassengerIds.splice(action.source.index, 1);\r\n\t\t\tnewPassengerIds.splice(action.destination.index, 0, action.draggableId);\r\n\r\n\t\t\treturn drivers;\r\n\t\t}\r\n\r\n\t\tcase 'TRANSFER': {\r\n\t\t\tconst {source, destination, draggableId} = action;\r\n\r\n\t\t\tconst sourceColumn = drivers.driverColumns[source.droppableId];\r\n\t\t\tconst endColumn = drivers.driverColumns[destination.droppableId];\r\n\r\n\t\t\tif (destination.droppableId !== \"freePassengers\" &&\r\n\t\t\t\t\tendColumn.passengerIds.length === endColumn.seats\r\n\t\t\t) {\r\n\t\t\t\talert('This car is full!');\r\n\t\t\t\treturn drivers;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tsourceColumn.passengerIds.splice(source.index, 1);\r\n\t\t\tendColumn.passengerIds.splice(destination.index, 0, draggableId);\r\n\r\n\t\t\treturn drivers;\r\n\t\t}\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error();\r\n\t}\r\n}","import React, { useReducer, useEffect } from 'react';\r\nimport driverReducer from '../context/reducers/driverReducer';\r\n\r\nexport const CarpoolContext = React.createContext();\r\n\r\nconst initialData = [\r\n\t{\r\n\tname: 'driver1',\r\n\tseats: 3,\r\n\tid: 'driver1',\r\n\tpassengers: [{name: 'pass1', id: 'pass1'}, {name: 'pass2', id: 'pass2'}]\r\n\t},\r\n\t{\r\n\tname: 'driver2',\r\n\tseats: 3,\r\n\tid: 'driver2',\r\n\tpassengers: [{name: 'passX', id:'passX'}]\r\n\t},\r\n\t// This is a unique column. Handle with care!\r\n\t{\r\n\t\tname: 'freePassengers',\r\n\t\tseats: null,\r\n\t\tid: 'freePassengers',\r\n\t\tpassengers: [{name: 'pass3', id: 'pass3'}, {name: 'pass4', id: 'pass4'}]\r\n\t}\r\n];\r\n\r\n// Only includes state that is read at multiple levels of the app\r\nconst GlobalState = ({children}) => {\r\n\tconst [driverList, updateDriverList] = useReducer(driverReducer, {\r\n\t\tpassengerRows: {},\r\n\t\t// We include this placeholder object so the passengerList can parse through it without returning any errors\r\n\t\tdriverColumns: {\r\n\t\t\tfreePassengers: {\r\n\t\t\t\tid: \"freePassengers\",\r\n\t\t\t\tname: \"freePassengers\",\r\n\t\t\t\tpassengerIds: []\r\n\t\t\t}\r\n\t\t},\r\n\t\tcolumnOrder: []\r\n\t});\r\n\r\n\tfunction fakeApiCall() {\r\n\t\t// API call would go here, then we'd send the data to our reducer to process\r\n\t\tupdateDriverList({\r\n\t\t\ttype: 'INIT',\r\n\t\t\tdrivers: initialData\r\n\t\t})\r\n\t}\r\n\r\n\tuseEffect(() => fakeApiCall(), []);\r\n\r\n\treturn (\r\n\t\t<CarpoolContext.Provider \r\n\t\t\tvalue={{\r\n\t\t\t\tdriverList, \r\n\t\t\t\tupdateDriverList,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{children}\r\n\t\t</CarpoolContext.Provider>\r\n\t);\r\n}\r\n\r\nexport default GlobalState;\r\n\r\n","export default function statusReducer(state, action) {\r\n\tconst drivers = action.drivers;\r\n\tswitch(action.type) {\r\n\t\tcase 'UPDATE':\r\n\t\t\t// Handle the case for 0 drivers\r\n\t\t\tif (drivers.columnOrder.length === 0) {\r\n\t\t\t\treturn state\r\n\t\t\t} \r\n\r\n\t\t\t// Calculate the number of used and max seats\r\n\t\t\tconst reducer = (accumulator, currentValue) => accumulator + currentValue;\r\n\t\t\tlet seatCountArray = [];\r\n\t\t\tlet usedSeatsArray = [];\r\n\t\t\tdrivers.columnOrder.forEach(columnId => {\r\n\t\t\t\tlet driverData = drivers.driverColumns[columnId];\r\n\r\n\t\t\t\tusedSeatsArray.push(driverData.passengerIds.length); // Occupied seat count of each driver\r\n\t\t\t\tseatCountArray.push(parseInt(driverData.seats)); // Max seat count of each driver\r\n\t\t\t})\r\n\r\n\t\t\t// Determine if empty cars exist using the usedSeatsArray before reducing it\r\n\t\t\tlet emptyCars = false;\r\n\t\t\tfor (const element of usedSeatsArray) {\r\n\t\t\t\tif (element === 0) {\r\n\t\t\t\t\temptyCars = true;\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Count number of unoccupied seats\r\n\t\t\tconst freePassengers = drivers.driverColumns.freePassengers.passengerIds.length;\r\n\r\n\t\t\tlet usedSeatCount = usedSeatsArray.reduce(reducer);\r\n\t\t\tlet maxSeats = seatCountArray.reduce(reducer);\r\n\r\n\t\t\treturn {\r\n\t\t\t\tusedSeatCount,\r\n\t\t\t\tmaxSeats,\r\n\t\t\t\temptyCars,\r\n\t\t\t\tfreePassengers\r\n\t\t\t}\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error();\r\n\t}\r\n}","import React, { useEffect, useContext, useReducer } from 'react';\r\nimport { CarpoolContext } from '../context/GlobalState';\r\nimport statusReducer from '../context/reducers/statusReducer';\r\n\r\nconst DriverStatusBar = () => {\r\n\t// State is maintained here because it only needs to be used by this component\r\n\tconst [status, updateStatus] = useReducer(statusReducer, {\r\n\t\tusedSeatCount: 0,\r\n\t\tmaxSeats: 0,\r\n\t\temptyCars: false,\r\n\t\tfreePassengers: 0\r\n\t})\r\n\r\n\tconst {driverList} = useContext(CarpoolContext);\r\n\r\n\tuseEffect(() => updateStatus({type: 'UPDATE', drivers: driverList}), [driverList]);\r\n\r\n\treturn (\r\n\t\t<ul className=\"drivers__statusBar\">\r\n\t\t\t<li>\r\n\t\t\t\t<strong>{status.usedSeatCount}/{status.maxSeats} </strong>\r\n\t\t\t\tseats used\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t\t{status.emptyCars ? 'There are empty cars' : 'No empty cars'}\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t\t<strong>{status.freePassengers} </strong>\r\n\t\t\t\tpeople need rides\r\n\t\t\t</li>\r\n\t\t\t{/* <button>Auto-assign</button> */}\r\n\t\t</ul>\r\n\t);\r\n}\r\n\r\nexport default DriverStatusBar;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst IconButton = ({handleClick, icon}) => {\r\n\treturn (\r\n\t\t<button \r\n\t\t\tclassName=\"iconButton\"\r\n\t\t\tonClick={handleClick}\r\n\t\t>\r\n\t\t\t<FontAwesomeIcon \r\n\t\t\t\ticon={icon} \r\n\t\t\t/>\r\n\t\t</button>\r\n\t);\r\n}\r\n\r\nexport default IconButton;\r\n","import React from 'react';\r\nimport IconButton from '../reusable/IconButton';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\n\r\n// The passengers prop is either all the unseated passengers or the driver's specific passengers. The type depends on the props.\r\nconst PassengerTileContainer = ({isDraggingOver, handleUpdate, driverId, passengers, innerRef, placeholder}) => {\r\n\tconsole.log(isDraggingOver);\r\n\r\n\treturn (\r\n\t\t<div \r\n\t\t\tclassName={isDraggingOver ? \"passengerTiles--isDraggingOver\" : \"passengerTiles\"}\r\n\t\t\tref={innerRef}\r\n\t\t>\r\n\t\t\t\t{passengers.map((passenger, i) =>\r\n\t\t\t\t\t<Draggable\r\n\t\t\t\t\t\tdraggableId={passenger.id.toString()}\r\n\t\t\t\t\t\tindex={i}\r\n\t\t\t\t\t\tkey={passenger.id}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{(provided) => (\r\n\t\t\t\t\t\t\t<div \r\n\t\t\t\t\t\t\t\t{...provided.draggableProps}\r\n\t\t\t\t\t\t\t\t{...provided.dragHandleProps}\r\n\t\t\t\t\t\t\t\tref={provided.innerRef}\r\n\t\t\t\t\t\t\t\tkey={passenger.id} \r\n\t\t\t\t\t\t\t\tid={passenger.id} \r\n\t\t\t\t\t\t\t\tclassName=\"passengerTiles__card\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t\t<span className=\"grippy\"></span>\r\n\t\t\t\t\t\t\t\t\t{passenger.name}\r\n\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\t\t\thandleClick={() => handleUpdate({\r\n\t\t\t\t\t\t\t\t\ttype: 'DELETE_PASSENGER', \r\n\t\t\t\t\t\t\t\t\tdriverId: driverId, \r\n\t\t\t\t\t\t\t\t\tpassengerId: passenger.id \r\n\t\t\t\t\t\t\t\t\t})} \r\n\t\t\t\t\t\t\t\ticon=\"trash\" \r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div> \r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Draggable>\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\t{placeholder}\r\n\t\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default PassengerTileContainer;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport PassengerTileContainer from '../passengerPanel/PassengerTileContainer';\r\nimport IconButton from '../reusable/IconButton';\r\nimport { CarpoolContext } from '../context/GlobalState';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\n\r\nconst DriverCard = ({name, id, passengers, totalSeats, toggleEditDriver, updateDriverBeingEdited}) => {\r\n\tconst [seatCapacityBar, updateCapacityBar] = useState(0); // Capacity bar width\r\n\tconst {updateDriverList} = useContext(CarpoolContext);\r\n\tuseEffect(() => updateCapacityBar((passengers.length / totalSeats) * 100), [passengers.length, totalSeats]);\r\n\r\n\tfunction callEditModal() {\r\n\t\ttoggleEditDriver(true);\r\n\t\tupdateDriverBeingEdited({\r\n\t\t\tname,\r\n\t\t\ttotalSeats,\r\n\t\t\tpassengers,\r\n\t\t\tid\r\n\t\t})\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"driversCard\">\r\n\t\t\t<div className=\"driversCard__headerTop\">\r\n\t\t\t\t<p>{name}</p>\r\n\t\t\t\t<IconButton\r\n\t\t\t\t\ticon=\"user-edit\"\r\n\t\t\t\t\thandleClick={callEditModal}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"driversCard__headerBottom\">\r\n\t\t\t\t<p>({passengers.length}/{totalSeats})</p>\r\n\t\t\t\t<div \r\n\t\t\t\t\tclassName={`${seatCapacityBar} ` < 100 ? 'driversCard__percentBar--incomplete' : 'driversCard__percentBar--complete' }\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\twidth: `${seatCapacityBar}%`,\r\n\t\t\t\t\t}}>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<Droppable\r\n\t\t\t\tdroppableId={id.toString()}\r\n\t\t\t>\r\n\t\t\t\t{(provided, snapshot) => (\r\n\t\t\t\t\t<PassengerTileContainer\r\n\t\t\t\t\t\t{...provided.droppableProps}\r\n\t\t\t\t\t\tinnerRef={provided.innerRef}\r\n\t\t\t\t\t\tpassengers={passengers}\r\n\t\t\t\t\t\thandleUpdate={updateDriverList}\r\n\t\t\t\t\t\tdriverId={id}\r\n\t\t\t\t\t\tplaceholder={provided.placeholder}\r\n\t\t\t\t\t\tisDraggingOver={snapshot.isDraggingOver}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t</PassengerTileContainer>\r\n\t\t\t\t)}\r\n\t\t\t</Droppable>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default DriverCard;\r\n","import React from 'react';\r\nimport IconButton from './IconButton';\r\n\r\nconst Modal = ({children, isVisible, handleVisibility}) => {\r\n\treturn (\r\n\t\t<div \r\n\t\t\tclassName={isVisible ? 'modal--visible' : 'modal'} \r\n\t\t>\r\n\t\t\t<div \r\n\t\t\t\tclassName=\"modal__content\"\r\n\t\t\t>\r\n\t\t\t\t<div \r\n\t\t\t\t\tclassName=\"modal__close\" \r\n\t\t\t\t\tonClick={() => handleVisibility(false)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<IconButton \r\n\t\t\t\t\t\ticon=\"times\" \r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t\t{children}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Modal;\r\n","const { useState } = require('react');\r\n\r\nexport default function useFormData() {\r\n\tconst [formData, setFormData] = useState({});\r\n\r\n\tfunction handleInputChange(e) {\r\n\t\tconst target = e.target;\r\n\t\tconst {name, value} = target;\r\n\t\tsetFormData({\r\n\t\t\t...formData,\r\n\t\t\t[name]: value\r\n\t\t})\r\n\t}\r\n\r\n\treturn {\r\n\t\tformData,\r\n\t\tsetFormData,\r\n\t\thandleInputChange\r\n\t}\r\n}","import React from 'react';\r\nimport Modal from '../../reusable/Modal';\r\nimport useFormData from '../../../hooks/useFormData';\r\n\r\nconst AddDriverModal = ({isVisible, handleVisibility, handleAdd}) => {\r\n\tconst {formData, setFormData, handleInputChange} = useFormData();\r\n\r\n\tfunction handleSubmit(e) {\r\n\t\te.preventDefault()\r\n\t\te.target.reset();\r\n\t\tsetFormData({});\r\n\t\treturn handleAdd({type: 'ADD_DRIVER', formData});\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Modal \r\n\t\t\t\tisVisible={isVisible} \r\n\t\t\t\thandleVisibility={handleVisibility}\r\n\t\t\t>\r\n\t\t\t\t<h1>Add Drivers</h1>\r\n\t\t\t\t<form onSubmit={(e) => handleSubmit(e)}>\r\n\t\t\t\t\t<label htmlFor=\"driverName\">Driver's name: </label>\r\n\t\t\t\t\t<input \r\n\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\tname=\"driverName\" \r\n\t\t\t\t\t\tid=\"driverName\" \r\n\t\t\t\t\t\tvalue={formData.driverName || ''} \r\n\t\t\t\t\t\tonChange={(e) => handleInputChange(e)} \r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<label htmlFor=\"driverSeats\">Number of available seats: </label>\r\n\t\t\t\t\t<select \r\n\t\t\t\t\t\tname=\"driverSeats\" \r\n\t\t\t\t\t\tid=\"driverSeats\" \r\n\t\t\t\t\t\tvalue={formData.driverSeats} \r\n\t\t\t\t\t\tonChange={(e) => handleInputChange(e)} \r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<option value=\"\">-</option>\r\n\t\t\t\t\t\t<option value=\"1\">1</option>\r\n\t\t\t\t\t\t<option value=\"2\">2</option>\r\n\t\t\t\t\t\t<option value=\"3\">3</option>\r\n\t\t\t\t\t\t<option value=\"4\">4</option>\r\n\t\t\t\t\t\t<option value=\"5\">5</option>\r\n\t\t\t\t\t\t<option value=\"6\">6</option>\r\n\t\t\t\t\t\t<option value=\"7\">7</option>\r\n\t\t\t\t\t</select>\r\n\t\t\t\t\t<input type=\"submit\" value=\"Add\"/>\r\n\t\t\t\t</form>\t\r\n\t\t\t</Modal>\r\n\t);\r\n}\r\n\r\nexport default AddDriverModal;\r\n","import React from 'react';\r\nimport Modal from '../../reusable/Modal'\r\n\r\nconst LinkModal = ({isVisible, handleVisibility}) => {\r\n\treturn (\r\n\t\t<Modal \r\n\t\t\tisVisible={isVisible} \r\n\t\t\thandleVisibility={handleVisibility}\r\n\t\t>\r\n\t\t\t<div className=\"modalMessage\">\r\n\t\t\t\t<h1>Sit back and relax.</h1>\r\n\t\t\t\t<p>Share this link with your attendees to allow them to sign up on their own!</p>\r\n\t\t\t\t<p>No account needed.</p>\r\n\t\t\t\t<h3><a href=\"#\">https://thisfeatureisntreadyyet.com/work-in-progress</a></h3>\r\n\t\t\t\t<p>They can sign up as a driver or passenger to an existing car.</p>\r\n\t\t\t</div>\r\n\t\t</Modal>\r\n\t);\r\n}\r\n\r\nexport default LinkModal;\r\n","import React, { useEffect, useContext } from 'react';\r\nimport Modal from '../../reusable/Modal';\r\nimport useFormData from '../../../hooks/useFormData';\r\nimport { CarpoolContext } from '../../context/GlobalState';\r\n\r\nconst EditDriverModal = ({isVisible, handleVisibility, driver}) => {\r\n\tconst {formData, setFormData, handleInputChange} = useFormData();\r\n\r\n\t// This block is used for conditional rendering of the delete button\r\n\tlet occupied;\r\n\tif (driver.passengers && driver.passengers.length > 0) {\r\n\t\toccupied = true\r\n\t}\r\n\r\n\t// Auto-fill the form with the selected driver's data\r\n\tuseEffect(() => setFormData({\r\n\t\tdriverName: driver.name,\r\n\t\tdriverSeats: driver.totalSeats\r\n\t}), [driver, setFormData])\r\n\r\n\tconst { updateDriverList } = useContext(CarpoolContext);\r\n\r\n\tfunction handleSubmit(e) {\r\n\t\te.preventDefault();\r\n\t\tsetFormData({});\r\n\t\thandleVisibility(false);\r\n\t\tupdateDriverList({type: 'EDIT', driverId: driver.id, formData})\r\n\t}\r\n\r\n\tfunction handleDeleteDriver() {\r\n\t\tsetFormData({});\r\n\t\thandleVisibility(false); // Immediately close the modal for better UX\r\n\t\tupdateDriverList({type: 'DELETE', driverId: driver.id})\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Modal \r\n\t\t\tisVisible={isVisible} \r\n\t\t\thandleVisibility={handleVisibility}\r\n\t\t\t>\r\n\t\t\t<h1>\r\n\t\t\t\tEdit Driver\r\n\t\t\t</h1>\r\n\t\t\t<form\r\n\t\t\t\tonSubmit={(e) => handleSubmit(e)}\r\n\t\t\t>\r\n\t\t\t\t<label htmlFor=\"driverName\">\r\n\t\t\t\t\tDriver's name: \r\n\t\t\t\t</label>\r\n\t\t\t\t<input \r\n\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\tname=\"driverName\" \r\n\t\t\t\t\tid=\"driverName\" \r\n\t\t\t\t\tvalue={formData.driverName || ''} // There is an || operator here to keep the component controlled\r\n\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t\trequired\r\n\t\t\t\t/>\r\n\t\t\t\t<label \r\n\t\t\t\t\thtmlFor=\"driverSeats\"\r\n\t\t\t\t>\r\n\t\t\t\t\tNumber of available seats: \r\n\t\t\t\t</label>\r\n\t\t\t\t<select \r\n\t\t\t\t\tname=\"driverSeats\" \r\n\t\t\t\t\tid=\"driverSeats\"\r\n\t\t\t\t\tdefaultValue={driver.totalSeats}\r\n\t\t\t\t\tvalue={formData.driverSeats}\r\n\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t>\r\n\t\t\t\t\t<option value=\"1\">1</option>\r\n\t\t\t\t\t<option value=\"2\">2</option>\r\n\t\t\t\t\t<option value=\"3\">3</option>\r\n\t\t\t\t\t<option value=\"4\">4</option>\r\n\t\t\t\t\t<option value=\"5\">5</option>\r\n\t\t\t\t\t<option value=\"6\">6</option>\r\n\t\t\t\t\t<option value=\"7\">7</option>\r\n\t\t\t\t</select>\r\n\t\t\t\t<input \r\n\t\t\t\t\ttype=\"submit\" \r\n\t\t\t\t\tvalue=\"Update\"\r\n\t\t\t\t/>\r\n\t\t\t\t{occupied ? \r\n\t\t\t\t<p>To delete this driver, remove their passengers first.</p> :\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\ttype=\"button\" \r\n\t\t\t\t\t\tonClick={handleDeleteDriver}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tDelete Driver\r\n\t\t\t\t\t</button>\r\n\t\t\t\t}\r\n\t\t\t</form>\t\r\n\t\t</Modal>\r\n\t);\r\n}\r\n\r\nexport default EditDriverModal;\r\n","import React, { useState, useContext } from 'react';\r\nimport DriverStatusBar from './DriverStatusBar';\r\nimport DriverCard from './DriverCard';\r\nimport IconButton from '../reusable/IconButton';\r\nimport AddDriverModal from './modals/AddDriverModal';\r\nimport LinkModal from './modals/LinkModal';\r\nimport EditDriverModal from './modals/EditDriverModal';\r\nimport { CarpoolContext } from '../context/GlobalState';\r\n\r\nconst DriverContainer = () => {\r\n\tconst [isAddingDriver, toggleAddModal] = useState(false);\r\n\tconst [isViewingRestLink, toggleRestLink] = useState(false);\r\n\tconst [isEditingDriver, toggleEditDriver] = useState(false);\r\n\tconst [driverBeingEdited, updateDriverBeingEdited] = useState({});\r\n\r\n\tconst { driverList, updateDriverList } = useContext(CarpoolContext);\r\n\r\n\treturn (\r\n\t\t<div className=\"planner__left\">\r\n\t\t\t<AddDriverModal\r\n\t\t\t\tisVisible={isAddingDriver}\r\n\t\t\t\thandleVisibility={toggleAddModal}\r\n\t\t\t\thandleAdd={updateDriverList}\r\n\t\t\t/>\r\n\t\t\t<LinkModal \r\n\t\t\t\tisVisible={isViewingRestLink}\r\n\t\t\t\thandleVisibility={toggleRestLink}\r\n\t\t\t/>\r\n\t\t\t<EditDriverModal \r\n\t\t\t\tisVisible={isEditingDriver}\r\n\t\t\t\thandleVisibility={toggleEditDriver}\r\n\t\t\t\tdriver={driverBeingEdited}\r\n\t\t\t/>\r\n\t\t\t<div className=\"drivers__header\">\r\n\t\t\t\t<h3>Manage Drivers</h3>\r\n\t\t\t\t<IconButton\r\n\t\t\t\t\ticon=\"link\"\r\n\t\t\t\t\thandleClick={() => toggleRestLink(true)}\r\n\t\t\t\t/>\r\n\t\t\t\t<IconButton \r\n\t\t\t\t\ticon=\"plus\"\r\n\t\t\t\t\thandleClick={() => toggleAddModal(true)}\t\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<DriverStatusBar />\r\n\t\t\t<div className=\"drivers__container\">\r\n\t\t\t\t{driverList.columnOrder.map((columnId) => {\r\n\t\t\t\t\tconst driver = driverList.driverColumns[columnId];\r\n\t\t\t\t\tconst passengers = driver.passengerIds.map(passenger => driverList.passengerRows[passenger]);\r\n\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<DriverCard\r\n\t\t\t\t\t\t\tkey={columnId}\r\n\t\t\t\t\t\t\tid={columnId}\r\n\t\t\t\t\t\t\tname={driver.name}\r\n\t\t\t\t\t\t\tpassengers={passengers}\r\n\t\t\t\t\t\t\ttotalSeats={driver.seats}\r\n\t\t\t\t\t\t\ttoggleEditDriver={toggleEditDriver}\r\n\t\t\t\t\t\t\tupdateDriverBeingEdited={updateDriverBeingEdited}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t</div>\r\n\t);\r\n}\r\n\r\nexport default DriverContainer;\r\n","import React, { useContext } from 'react';\r\nimport PassengerTileContainer from './PassengerTileContainer';\r\nimport useFormData from '../../hooks/useFormData';\r\nimport { CarpoolContext } from '../context/GlobalState';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\n\r\nconst Passengers = () => {\r\n\tconst { formData, setFormData, handleInputChange } = useFormData();\r\n\tconst { updateDriverList, driverList } = useContext(CarpoolContext);\r\n\r\n\tfunction handleAdd(e) {\r\n\t\tsetFormData({});\r\n\t\te.preventDefault();\r\n\t\te.target.reset();\r\n\t\treturn updateDriverList({\r\n\t\t\ttype: 'ADD_PASSENGER', \r\n\t\t\tname: formData.passengerName \r\n\t\t});\r\n\t}\r\n\r\n\tconst passengerIds = driverList.driverColumns.freePassengers.passengerIds;\r\n\tconst passengerData = passengerIds.map(id => driverList.passengerRows[id]);\r\n\tconst columnId = \"freePassengers\";\r\n\r\n\treturn ( \r\n\t\t<div className=\"passengersContainer\">\r\n\t\t\t<h3>Manage Passengers</h3>\r\n\t\t\t\t<form\r\n\t\t\t\t\tonSubmit={(e) => handleAdd(e)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<input \r\n\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\tname=\"passengerName\" \r\n\t\t\t\t\t\tid=\"passengerName\" \r\n\t\t\t\t\t\tplaceholder=\"Passenger's name...\"\r\n\t\t\t\t\t\tvalue={formData.name}\r\n\t\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<button type=\"submit\">Add</button>\r\n\t\t\t\t</form>\r\n\t\t\t\t<Droppable\r\n\t\t\t\t\tdroppableId={columnId}\r\n\t\t\t\t>\r\n\t\t\t\t\t{(provided, snapshot) => (\r\n\t\t\t\t\t\t<PassengerTileContainer \r\n\t\t\t\t\t\t\t{...provided.droppableProps}\r\n\t\t\t\t\t\t\tinnerRef={provided.innerRef}\r\n\t\t\t\t\t\t\thandleUpdate={updateDriverList}\r\n\t\t\t\t\t\t\tpassengers={passengerData}\r\n\t\t\t\t\t\t\tplaceholder={provided.placeholder}\r\n\t\t\t\t\t\t\tdriverId={columnId}\r\n\t\t\t\t\t\t\tisDraggingOver={snapshot.isDraggingOver}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Droppable>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Passengers;\r\n","import React, { useContext } from 'react';\r\nimport DriverContainer from './driverPanel/DriverContainer';\r\nimport PassengerContainer from './passengerPanel/PassengerContainer';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\nimport { CarpoolContext } from '../components/context/GlobalState';\r\n// import IconButton from '../reusable/IconButton';\r\n// import Navbar from '../reusable/Navbar';\r\n\r\n// TODO:\r\n// Deploy and get critiqued\r\n// Form validation (after critique)\r\n// Backend\r\n// Aesthetics\r\n\r\nconst Planner = () => {\r\n\tconst { updateDriverList } = useContext(CarpoolContext);\r\n\r\n\tconst onDragEnd = (result) => {\r\n\t\tconst {source, destination, draggableId} = result;\r\n\t\r\n\t\t// Outside drops\r\n\t\tif (!destination) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Drop in same place\r\n\t\tif (\r\n\t\t\t\tdestination.droppableId === source.droppableId &&\r\n\t\t\t\tdestination.index === source.index\r\n\t\t\t) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\tconst start = source.droppableId;\r\n\t\tconst end = destination.droppableId;\r\n\r\n\t\t// Drop in a different list\r\n\t\tif (start !== end) {\r\n\t\t\t\tupdateDriverList({\r\n\t\t\t\t\ttype: 'TRANSFER',\r\n\t\t\t\t\tsource, \r\n\t\t\t\t\tdestination,\r\n\t\t\t\t\tdraggableId\r\n\t\t\t\t})\r\n\t\t\t\treturn\r\n\t\t}\r\n\r\n\t\tupdateDriverList({\r\n\t\t\ttype: 'REORDER_PASSENGERS', \r\n\t\t\tsource, \r\n\t\t\tdestination,\r\n\t\t\tdraggableId\r\n\t\t})\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{/* <Navbar /> */}\r\n\t\t\t<div className=\"longTermPlanner\">\r\n\t\t\t\t<p>Ice Skating With Friends | February 12th, 2020 | 6:00pm {/* <span><IconButton icon=\"user-edit\"/></span> */}</p>\r\n\t\t\t\t<div className=\"longTermPlanner__cards\">\r\n\t\t\t\t\t<DragDropContext\r\n\t\t\t\t\t\tonDragEnd={onDragEnd}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<DriverContainer />\r\n\t\t\t\t\t\t<PassengerContainer />\r\n\t\t\t\t\t</DragDropContext>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default Planner;\r\n","import React from 'react';\nimport Planner from './components/Planner';\nimport GlobalState from './components/context/GlobalState';\n// Eventually, this app will house your many routes\n\nfunction App() {\n  return (\n\t\t<GlobalState>\n\t\t\t<Planner />\n\t\t</GlobalState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTrash, faUserEdit, faLink, faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(\n\tfaTrash, \n\tfaUserEdit, \n\tfaLink,\n\tfaPlus,\n\tfaTimes\n\t);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}