{"version":3,"sources":["helpers/findPassengerColumnId.js","context/reducers/driverReducer.js","context/GlobalState.js","context/reducers/statusReducer.js","routes/planner/driverPanel/DriverContainerStatus.js","reusable_components/IconButton.js","custom_hooks/useBlurEdit.js","helpers/passengerArray.js","routes/planner/PassengerContainer.js","routes/planner/driverPanel/DriverContainerCard.js","reusable_components/Modal.js","custom_hooks/useFormData.js","routes/planner/driverPanel/modals/AddDriver.js","routes/planner/driverPanel/modals/Link.js","routes/planner/driverPanel/modals/EditDriver.js","routes/planner/driverPanel/DriverContainer.js","routes/planner/passengerPanel/AddPassengerModal.js","routes/planner/passengerPanel/UnassignedContainer.js","routes/planner/Planner.js","App.js","serviceWorker.js","index.js"],"names":["findPassengerColumnId","driverList","passengerPoolId","driverId","isPassengerPool","driverReducer","state","action","drivers","passengerColumnId","driverColumns","passengerColumn","type","passengerData","passengerRows","forEach","driver","push","passengers","_id","id","name","nickname","seats","passengerIds","Array","from","passenger","columnOrder","splice","passengerId","newPassenger","formData","driverName","driverNickname","driverSeats","allDrivers","parseInt","updatedDriver","itemId","fieldName","value","filter","item","newPassengerIds","source","droppableId","index","destination","draggableId","sourceColumn","endColumn","length","alert","Error","CarpoolContext","React","createContext","GlobalState","children","useReducer","unassignedPassengers","updateDriverList","useEffect","a","axios","get","process","event","data","retrieveData","Provider","statusReducer","usedSeatCount","maxSeats","emptyCars","reducer","accumulator","currentValue","seatCountArray","usedSeatsArray","columnId","driverData","reduce","DriverStatusBar","status","updateStatus","useContext","className","IconButton","handleClick","icon","onClick","useBlurEdit","handleBlurEdit","e","original","target","handleKeyEdit","keyCode","blur","passengerArray","sourceId","destId","driverState","destColumn","sourcePassengers","destPassengers","host","eventId","PassengerTileContainer","isDraggingOver","handleUpdate","innerRef","placeholder","ref","map","i","toString","key","provided","draggableProps","dragHandleProps","rows","defaultValue","spellCheck","maxLength","onBlur","put","onKeyDown","delete","startId","DriverCard","totalSeats","toggleEditDriver","updateDriverBeingEdited","useState","seatCapacityBar","updateCapacityBar","style","width","snapshot","droppableProps","Modal","isVisible","handleVisibility","require","useFormData","setFormData","handleInputChange","AddDriverModal","handleAdd","preventDefault","reset","post","res","onSubmit","handleSubmit","htmlFor","onChange","required","LinkModal","href","EditDriverModal","occupied","isOverCapacity","setCapacityStatus","disabled","DriverContainer","isAddingDriver","toggleAddModal","isViewingRestLink","toggleRestLink","isEditingDriver","driverBeingEdited","AddDriver","Link","EditDriver","DriverContainerStatus","AddPassengerModal","response","nameRef","useRef","nicknameRef","current","focus","passengerName","passengerNickname","driverOptions","Passengers","isAddingPassenger","toggleAddPassenger","PassengerContainer","Planner","onDragEnd","result","start","end","UnassignedContainer","App","Boolean","window","location","hostname","match","console","log","REACT_APP_TEST","library","add","faTrash","faUserEdit","faLink","faPlus","faTimes","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3b08842d.chunk.js","sourcesContent":["export default function findPassengerColumnId(driverList) {\r\n  let passengerPoolId;\r\n\r\n  for (const driverId in driverList) {\r\n    if (driverList[driverId].isPassengerPool) {\r\n      passengerPoolId = driverId;\r\n    }\r\n  }\r\n\r\n  return passengerPoolId;\r\n}\r\n","import findPassengerColumnId from '../../helpers/findPassengerColumnId';\r\n\r\nexport default function driverReducer(state, action) {\r\n  let drivers = { ...state }; // The global state of the app\r\n  const passengerColumnId = findPassengerColumnId(drivers.driverColumns);\r\n  const passengerColumn = drivers.driverColumns[passengerColumnId];\r\n  switch (action.type) {\r\n    case 'INIT': {\r\n      const driverList = [...action.drivers]; // Retrieved list of drivers\r\n      // These will hold the values needed for our datastructure\r\n      let passengerData = [];\r\n      let passengerRows = {};\r\n      let driverColumns = {};\r\n\r\n      // Map each retrieved driver to a new object\r\n      driverList.forEach(driver => {\r\n        passengerData.push(...driver.passengers);\r\n        driverColumns = {\r\n          ...driverColumns,\r\n          [driver._id]: {\r\n            id: driver._id,\r\n            isPassengerPool: driver.isPassengerPool || false, // Special property to determine passenger column\r\n            name: driver.name,\r\n            nickname: driver.nickname,\r\n            seats: driver.seats,\r\n            passengerIds: Array.from(\r\n              driver.passengers,\r\n              passenger => passenger._id\r\n            ),\r\n          },\r\n        };\r\n      });\r\n\r\n      // Extract all passenger IDs\r\n      passengerData.forEach(passenger => {\r\n        passengerRows = {\r\n          ...passengerRows,\r\n          [passenger._id]: {\r\n            id: passenger._id,\r\n            name: passenger.name,\r\n            nickname: passenger.nickname,\r\n          },\r\n        };\r\n      });\r\n\r\n      const columnOrder = Array.from(driverList, driver => driver._id);\r\n      columnOrder.splice(0, 1); // To remove the column of passengers\r\n\r\n      const driverData = {\r\n        passengerRows,\r\n        driverColumns,\r\n        columnOrder,\r\n      };\r\n\r\n      return driverData;\r\n    }\r\n\r\n    case 'ADD_PASSENGER': {\r\n      const id = action.passengerId;\r\n      const newPassenger = {\r\n        id,\r\n        name: action.name,\r\n        nickname: action.nickname || null,\r\n      };\r\n\r\n      // Add to combined passenger pool\r\n      drivers.passengerRows = {\r\n        ...drivers.passengerRows,\r\n        [id]: newPassenger,\r\n      };\r\n\r\n      // Add to a specific passenger column\r\n      if (!action.driverId) {\r\n        passengerColumn.passengerIds.push(id);\r\n      } else {\r\n        const driver = drivers.driverColumns[action.driverId];\r\n        driver.passengerIds.push(id);\r\n      }\r\n\r\n      return drivers;\r\n    }\r\n\r\n    case 'ADD_DRIVER': {\r\n      let { driverName, driverNickname, driverSeats } = action.formData; // Destructure the form data\r\n      let id = action.driverId;\r\n      let allDrivers = drivers.driverColumns; // Get the drivers object of the state\r\n      let columnOrder = drivers.columnOrder;\r\n      allDrivers = {\r\n        ...allDrivers,\r\n        [id]: {\r\n          id,\r\n          name: driverName,\r\n          nickname: driverNickname,\r\n          passengerIds: [],\r\n          seats: parseInt(driverSeats),\r\n        },\r\n      };\r\n      // We do 2 reassignments because we also need to update the column order\r\n      drivers = {\r\n        ...drivers,\r\n        driverColumns: allDrivers,\r\n        columnOrder: [...columnOrder, id],\r\n      };\r\n      return drivers;\r\n    }\r\n\r\n    case 'EDIT_DRIVER_SEATS': {\r\n      let { driverSeats } = action.formData;\r\n      let updatedDriver = drivers.driverColumns[action.driverId];\r\n\r\n      updatedDriver = {\r\n        ...updatedDriver,\r\n        seats: parseInt(driverSeats),\r\n      };\r\n\r\n      drivers.driverColumns = {\r\n        ...drivers.driverColumns,\r\n        [action.driverId]: updatedDriver,\r\n      };\r\n      return drivers;\r\n    }\r\n\r\n    case 'EDIT_DRIVER_NAME': {\r\n      let driver = drivers.driverColumns[action.itemId];\r\n      driver = {\r\n        ...driver,\r\n        [action.fieldName]: action.value || null,\r\n      };\r\n      drivers.driverColumns = {\r\n        ...drivers.driverColumns,\r\n        [action.itemId]: driver,\r\n      };\r\n      return drivers;\r\n    }\r\n\r\n    case 'EDIT_PASSENGER': {\r\n      let passenger = drivers.passengerRows[action.itemId];\r\n      passenger = {\r\n        ...passenger,\r\n        [action.fieldName]: action.value || null,\r\n      };\r\n      drivers.passengerRows = {\r\n        ...drivers.passengerRows,\r\n        [action.itemId]: passenger,\r\n      };\r\n      return drivers;\r\n    }\r\n\r\n    case 'DELETE_DRIVER': {\r\n      drivers.columnOrder = drivers.columnOrder.filter(\r\n        id => id !== action.driverId\r\n      );\r\n      delete drivers.driverColumns[action.driverId];\r\n      // We still have the passengers stored in the passengerRows and we could probably reassign them to the passenger pool\r\n      return drivers;\r\n    }\r\n\r\n    case 'DELETE_PASSENGER': {\r\n      const { passengerId, driverId } = action;\r\n\r\n      let driver = drivers.driverColumns[driverId];\r\n      let passengers = driver.passengerIds;\r\n      passengers = passengers.filter(item => item !== passengerId);\r\n      driver.passengerIds = passengers;\r\n\r\n      if (!driver.isPassengerPool) {\r\n        const passengerPool = passengerColumn.passengerIds;\r\n        passengerPool.push(passengerId);\r\n      } else {\r\n        const passengerRows = drivers.passengerRows;\r\n        delete passengerRows[passengerId];\r\n      }\r\n\r\n      return drivers;\r\n    }\r\n\r\n    case 'REORDER_PASSENGERS': {\r\n      let column = drivers.driverColumns[action.source.droppableId];\r\n      const newPassengerIds = column.passengerIds;\r\n      newPassengerIds.splice(action.source.index, 1);\r\n      newPassengerIds.splice(action.destination.index, 0, action.draggableId);\r\n\r\n      return drivers;\r\n    }\r\n\r\n    case 'TRANSFER': {\r\n      const { source, destination, draggableId } = action;\r\n\r\n      const sourceColumn = drivers.driverColumns[source.droppableId];\r\n      const endColumn = drivers.driverColumns[destination.droppableId];\r\n\r\n      if (\r\n        destination.droppableId !== 'unassignedPassengers' &&\r\n        endColumn.passengerIds.length === endColumn.seats\r\n      ) {\r\n        alert('This car is full!');\r\n        return drivers;\r\n      }\r\n\r\n      sourceColumn.passengerIds.splice(source.index, 1);\r\n      endColumn.passengerIds.splice(destination.index, 0, draggableId);\r\n\r\n      return drivers;\r\n    }\r\n\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n","import React, { useReducer, useEffect } from 'react';\r\nimport driverReducer from '../context/reducers/driverReducer';\r\nimport axios from 'axios';\r\n\r\nexport const CarpoolContext = React.createContext();\r\n\r\n// Only includes state that is read at multiple levels of the app\r\nconst GlobalState = ({ children }) => {\r\n  const [driverList, updateDriverList] = useReducer(driverReducer, {\r\n    passengerRows: {},\r\n    // We include this placeholder object so the passengerList can parse through it without returning any errors\r\n    driverColumns: {\r\n      unassignedPassengers: {\r\n        id: null,\r\n        isPassengerPool: true,\r\n        name: null,\r\n        passengerIds: [],\r\n      },\r\n    },\r\n    columnOrder: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    async function retrieveData() {\r\n      const event = await axios.get(\r\n        `http://${process.env.REACT_APP_HOST}/api/events/${process.env.REACT_APP_EVENT_ID}`\r\n      );\r\n      updateDriverList({\r\n        type: 'INIT',\r\n        drivers: event.data.drivers,\r\n      });\r\n    }\r\n    retrieveData();\r\n  }, []);\r\n\r\n  return (\r\n    <CarpoolContext.Provider\r\n      value={{\r\n        driverList,\r\n        updateDriverList,\r\n      }}\r\n    >\r\n      {children}\r\n    </CarpoolContext.Provider>\r\n  );\r\n};\r\n\r\nexport default GlobalState;\r\n","import findPassengerColumnId from '../../helpers/findPassengerColumnId';\r\n\r\nexport default function statusReducer(state, action) {\r\n  const drivers = action.drivers;\r\n  const passengerColumnId = findPassengerColumnId(drivers.driverColumns);\r\n  const unassignedPassengers =\r\n    drivers.driverColumns[passengerColumnId].passengerIds.length;\r\n  switch (action.type) {\r\n    case 'UPDATE':\r\n      // Handle the case for 0 drivers\r\n      if (drivers.columnOrder.length === 0) {\r\n        return {\r\n          usedSeatCount: 0,\r\n          maxSeats: 0,\r\n          emptyCars: false,\r\n          unassignedPassengers,\r\n        };\r\n      }\r\n\r\n      // Calculate the number of used and max seats\r\n      const reducer = (accumulator, currentValue) => accumulator + currentValue;\r\n      let seatCountArray = [];\r\n      let usedSeatsArray = [];\r\n      drivers.columnOrder.forEach(columnId => {\r\n        let driverData = drivers.driverColumns[columnId];\r\n\r\n        usedSeatsArray.push(driverData.passengerIds.length); // Occupied seat count of each driver\r\n        seatCountArray.push(parseInt(driverData.seats)); // Max seat count of each driver\r\n      });\r\n\r\n      // Determine if empty cars exist using the usedSeatsArray before reducing it\r\n      let emptyCars = false;\r\n      for (const element of usedSeatsArray) {\r\n        if (element === 0) {\r\n          emptyCars = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      let usedSeatCount = usedSeatsArray.reduce(reducer);\r\n      let maxSeats = seatCountArray.reduce(reducer);\r\n\r\n      return {\r\n        usedSeatCount,\r\n        maxSeats,\r\n        emptyCars,\r\n        unassignedPassengers,\r\n      };\r\n\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n","import React, { useEffect, useContext, useReducer } from 'react';\r\nimport { CarpoolContext } from '../../../context/GlobalState';\r\nimport statusReducer from '../../../context/reducers/statusReducer';\r\n\r\nconst DriverStatusBar = () => {\r\n  // State is maintained here because it only needs to be used by this component\r\n  const [status, updateStatus] = useReducer(statusReducer, {\r\n    usedSeatCount: 0,\r\n    maxSeats: 0,\r\n    emptyCars: false,\r\n    unassignedPassengers: 0,\r\n  });\r\n\r\n  const { driverList } = useContext(CarpoolContext);\r\n\r\n  useEffect(() => updateStatus({ type: 'UPDATE', drivers: driverList }), [\r\n    driverList,\r\n  ]);\r\n\r\n  return (\r\n    <ul className=\"drivers__statusBar\">\r\n      <li>\r\n        <strong>\r\n          {status.usedSeatCount}/{status.maxSeats}{' '}\r\n        </strong>\r\n        seats used\r\n      </li>\r\n      <li>{status.emptyCars ? 'There are empty cars' : 'No empty cars'}</li>\r\n      <li>\r\n        <strong>{status.unassignedPassengers} </strong>\r\n        people need rides\r\n      </li>\r\n      {/* <button>Auto-assign</button> */}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default DriverStatusBar;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst IconButton = ({handleClick, icon}) => {\r\n\treturn (\r\n\t\t<button \r\n\t\t\tclassName=\"iconButton\"\r\n\t\t\tonClick={handleClick}\r\n\t\t>\r\n\t\t\t<FontAwesomeIcon \r\n\t\t\t\ticon={icon} \r\n\t\t\t/>\r\n\t\t</button>\r\n\t);\r\n}\r\n\r\nIconButton.propTypes = {\r\n\thandleClick: PropTypes.func,\r\n\ticon: PropTypes.string.isRequired\r\n}\r\n\r\nexport default IconButton;\r\n","import { useContext } from 'react';\r\nimport { CarpoolContext } from '../context/GlobalState';\r\n\r\nexport default function useBlurEdit() {\r\n\r\n\t// The title can just be separated from this\r\n\r\n\tconst { updateDriverList } = useContext(CarpoolContext);\r\n\r\n\tconst handleBlurEdit = (e, original, type, columnId, itemId) => {\r\n\t\t// To prevent accidental deletion\r\n\t\tif (e.target.value.length === 0) {\r\n\t\t\t// To be able to clear nicknames\r\n\t\t\tif (e.target.name !== \"nickname\") {\r\n\t\t\t\te.target.value = original;\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t\tupdateDriverList({\r\n\t\t\ttype,\r\n\t\t\tcolumnId,\r\n\t\t\titemId,\r\n\t\t\tfieldName: e.target.name,\r\n\t\t\tvalue: e.target.value\r\n\t\t});\r\n\t}\r\n\r\n\tconst handleKeyEdit = (e) => {\r\n\t\tif (e.keyCode === 13) { // keyCode 13 is the enter key\r\n\t\t\te.target.blur();\r\n\t\t} \r\n\t}\r\n\r\n\treturn {\r\n\t\thandleBlurEdit,\r\n\t\thandleKeyEdit\r\n\t}\r\n}\r\n","// The point of this function is to take passenger IDs, create an array of objects, and send it to the RESTful API\r\n\r\nexport default function passengerArray(sourceId, destId, state) {\r\n  const driverState = { ...state };\r\n\r\n  const sourceColumn = driverState.driverColumns[sourceId];\r\n  const destColumn = driverState.driverColumns[destId];\r\n  const passengerRows = driverState.passengerRows;\r\n  const sourcePassengers = [];\r\n  const destPassengers = [];\r\n\r\n  sourceColumn.passengerIds.forEach(id => {\r\n    const passenger = passengerRows[id];\r\n    sourcePassengers.push({\r\n      _id: passenger.id,\r\n      name: passenger.name,\r\n      nickname: passenger.nickname,\r\n    });\r\n  });\r\n\r\n  destColumn.passengerIds.forEach(id => {\r\n    const passenger = passengerRows[id];\r\n    destPassengers.push({\r\n      _id: passenger.id,\r\n      name: passenger.name,\r\n      nickname: passenger.nickname,\r\n    });\r\n  });\r\n\r\n  const passengerData = { sourcePassengers, destPassengers };\r\n  return passengerData;\r\n}\r\n","import React, { useContext } from 'react';\r\nimport IconButton from '../../reusable_components/IconButton';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport useBlurEdit from '../../custom_hooks/useBlurEdit';\r\nimport axios from 'axios';\r\nimport { CarpoolContext } from '../../context/GlobalState';\r\nimport passengerArray from '../../helpers/passengerArray';\r\nimport findPassengerColumnId from '../../helpers/findPassengerColumnId';\r\nconst host = process.env.REACT_APP_HOST;\r\nconst eventId = process.env.REACT_APP_EVENT_ID;\r\n\r\n// NOTE: This component is shared beteen the DriverContainer and UnassignedContainer components\r\nconst PassengerTileContainer = ({\r\n  isDraggingOver,\r\n  handleUpdate,\r\n  driverId,\r\n  passengers,\r\n  innerRef,\r\n  placeholder,\r\n}) => {\r\n  const { handleBlurEdit, handleKeyEdit } = useBlurEdit();\r\n  const { driverList } = useContext(CarpoolContext);\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        isDraggingOver ? 'passengerTiles--isDraggingOver' : 'passengerTiles'\r\n      }\r\n      ref={innerRef}\r\n    >\r\n      {passengers.map((passenger, i) => (\r\n        // Each of these draggables is an individual passenger tile\r\n        <Draggable\r\n          draggableId={passenger.id.toString()}\r\n          index={i}\r\n          key={passenger.id}\r\n        >\r\n          {provided => (\r\n            <div\r\n              {...provided.draggableProps}\r\n              ref={provided.innerRef}\r\n              key={passenger.id}\r\n              id={passenger.id}\r\n              className=\"passengerTiles__card\"\r\n            >\r\n              <div {...provided.dragHandleProps}>\r\n                <span className=\"grippy\" />\r\n              </div>\r\n              <textarea\r\n                rows=\"1\"\r\n                defaultValue={passenger.name}\r\n                spellCheck={false}\r\n                maxLength=\"20\"\r\n                name=\"name\"\r\n                onBlur={e => {\r\n                  axios.put(\r\n                    `http://${host}/api/events/${eventId}/drivers/${driverId}/passengers/${passenger.id}`,\r\n                    {\r\n                      name: e.target.value,\r\n                    }\r\n                  );\r\n                  handleBlurEdit(\r\n                    e,\r\n                    passenger.name,\r\n                    'EDIT_PASSENGER',\r\n                    driverId,\r\n                    passenger.id\r\n                  );\r\n                }}\r\n                onKeyDown={handleKeyEdit}\r\n              />\r\n              <IconButton\r\n                handleClick={async () => {\r\n                  handleUpdate({\r\n                    type: 'DELETE_PASSENGER',\r\n                    driverId: driverId,\r\n                    passengerId: passenger.id,\r\n                  });\r\n                  if (driverList.driverColumns[driverId].isPassengerPool) {\r\n                    axios.delete(\r\n                      `http://${host}/api/events/${eventId}/drivers/${driverId}/passengers/${passenger.id}`\r\n                    );\r\n                  } else {\r\n                    const passengerPoolId = findPassengerColumnId(\r\n                      driverList.driverColumns\r\n                    );\r\n                    const { sourcePassengers, destPassengers } = passengerArray(\r\n                      driverId,\r\n                      passengerPoolId,\r\n                      driverList\r\n                    );\r\n                    axios.put(\r\n                      `http://${host}/api/events/${eventId}/drivers/transfer`,\r\n                      {\r\n                        sourcePassengers,\r\n                        destPassengers,\r\n                        startId: driverId,\r\n                        destId: passengerPoolId,\r\n                      }\r\n                    );\r\n                  }\r\n                }}\r\n                icon=\"trash\"\r\n              />\r\n              <textarea\r\n                rows=\"1\"\r\n                defaultValue={passenger.nickname}\r\n                spellCheck={false}\r\n                maxLength=\"20\"\r\n                name=\"nickname\"\r\n                placeholder=\"(no nickname)\"\r\n                onBlur={e => {\r\n                  axios.put(\r\n                    `http://${host}/api/events/${eventId}/drivers/${driverId}/passengers/${passenger.id}`,\r\n                    { nickname: e.target.value }\r\n                  );\r\n                  handleBlurEdit(\r\n                    e,\r\n                    passenger.nickname,\r\n                    'EDIT_PASSENGER',\r\n                    driverId,\r\n                    passenger.id\r\n                  );\r\n                }}\r\n                onKeyDown={handleKeyEdit}\r\n              />\r\n            </div>\r\n          )}\r\n        </Draggable>\r\n      ))}\r\n      {placeholder}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PassengerTileContainer;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport PassengerTileContainer from '../PassengerContainer';\r\nimport IconButton from '../../../reusable_components/IconButton';\r\nimport { CarpoolContext } from '../../../context/GlobalState';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport PropTypes from 'prop-types';\r\nimport useBlurEdit from '../../../custom_hooks/useBlurEdit';\r\nimport axios from 'axios';\r\nconst host = process.env.REACT_APP_HOST;\r\nconst eventId = process.env.REACT_APP_EVENT_ID;\r\n\r\nconst DriverCard = ({\r\n  name,\r\n  nickname,\r\n  id,\r\n  passengers,\r\n  totalSeats,\r\n  toggleEditDriver,\r\n  updateDriverBeingEdited,\r\n}) => {\r\n  const [seatCapacityBar, updateCapacityBar] = useState(0); // Capacity bar width\r\n  const { updateDriverList } = useContext(CarpoolContext);\r\n  const { handleBlurEdit, handleKeyEdit } = useBlurEdit();\r\n\r\n  useEffect(() => updateCapacityBar((passengers.length / totalSeats) * 100), [\r\n    passengers.length,\r\n    totalSeats,\r\n  ]);\r\n\r\n  function callEditModal() {\r\n    toggleEditDriver(true);\r\n    updateDriverBeingEdited({\r\n      totalSeats,\r\n      passengers, // So we can determine if passengers are still in the car\r\n      id,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"driversCard\">\r\n      <div className=\"driversCard__headerTop\">\r\n        {/* Maybe we can turn these textareas into reusable components? */}\r\n        {/* Maybe the custom component can use the custom hook */}\r\n        {/* We can always refactor this later */}\r\n        <textarea\r\n          defaultValue={name}\r\n          name=\"name\"\r\n          rows=\"1\"\r\n          className=\"driversCard__name\"\r\n          spellCheck={false}\r\n          maxLength=\"20\"\r\n          onKeyDown={handleKeyEdit}\r\n          onBlur={e => {\r\n            axios.put(`http://${host}/api/events/${eventId}/drivers/${id}`, {\r\n              name: e.target.value,\r\n            });\r\n            handleBlurEdit(e, name, 'EDIT_DRIVER_NAME', id, id);\r\n          }}\r\n        />\r\n        <IconButton icon=\"user-edit\" handleClick={callEditModal} />\r\n        <textarea\r\n          defaultValue={nickname}\r\n          spellCheck={false}\r\n          name=\"nickname\"\r\n          placeholder=\"(no nickname)\"\r\n          rows=\"1\"\r\n          maxLength=\"20\"\r\n          onKeyDown={handleKeyEdit}\r\n          onBlur={e => {\r\n            axios.put(`http://${host}/api/events/${eventId}/drivers/${id}`, {\r\n              nickname: e.target.value,\r\n            });\r\n            handleBlurEdit(e, nickname, 'EDIT_DRIVER_NAME', id, id);\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"driversCard__headerBottom\">\r\n        <p>\r\n          ({passengers.length}/{totalSeats})\r\n        </p>\r\n        <div className=\"driversCard__percentBarContainer\">\r\n          <div\r\n            className={\r\n              `${seatCapacityBar} ` < 100\r\n                ? 'driversCard__percentBar--incomplete'\r\n                : 'driversCard__percentBar--complete'\r\n            }\r\n            style={{\r\n              width: `${seatCapacityBar}%`,\r\n            }}\r\n          ></div>\r\n        </div>\r\n      </div>\r\n      <Droppable droppableId={id.toString()}>\r\n        {(provided, snapshot) => (\r\n          <PassengerTileContainer\r\n            {...provided.droppableProps}\r\n            innerRef={provided.innerRef}\r\n            passengers={passengers}\r\n            handleUpdate={updateDriverList}\r\n            driverId={id}\r\n            placeholder={provided.placeholder}\r\n            isDraggingOver={snapshot.isDraggingOver}\r\n          ></PassengerTileContainer>\r\n        )}\r\n      </Droppable>\r\n    </div>\r\n  );\r\n};\r\n\r\nDriverCard.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  nickname: PropTypes.string,\r\n  id: PropTypes.string.isRequired,\r\n  passengers: PropTypes.array.isRequired,\r\n  totalSeats: PropTypes.number.isRequired,\r\n  toggleEditDriver: PropTypes.func.isRequired,\r\n  updateDriverBeingEdited: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default DriverCard;\r\n","import React from 'react';\r\nimport IconButton from './IconButton';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Modal = ({children, isVisible, handleVisibility}) => {\r\n\treturn (\r\n\t\t<div \r\n\t\t\tclassName={isVisible ? 'modal--visible' : 'modal'} \r\n\t\t>\r\n\t\t\t<div \r\n\t\t\t\tclassName=\"modal__content\"\r\n\t\t\t>\r\n\t\t\t\t<div \r\n\t\t\t\t\tclassName=\"modal__close\" \r\n\t\t\t\t\tonClick={() => handleVisibility(false)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<IconButton \r\n\t\t\t\t\t\ticon=\"times\" \r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t\t{children}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nModal.propTypes = {\r\n\tisVisible: PropTypes.bool.isRequired,\r\n\thandleVisibility: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Modal;\r\n","const { useState } = require('react');\r\n\r\nexport default function useFormData() {\r\n\tconst [formData, setFormData] = useState({});\r\n\r\n\tfunction handleInputChange(e) {\r\n\t\tconst target = e.target;\r\n\t\tconst {name, value} = target;\r\n\t\tsetFormData({\r\n\t\t\t...formData,\r\n\t\t\t[name]: value\r\n\t\t})\r\n\t}\r\n\r\n\treturn {\r\n\t\tformData,\r\n\t\tsetFormData,\r\n\t\thandleInputChange\r\n\t}\r\n}","import React from 'react';\r\nimport Modal from '../../../../reusable_components/Modal';\r\nimport useFormData from '../../../../custom_hooks/useFormData';\r\nimport axios from 'axios';\r\n\r\nconst AddDriverModal = ({ isVisible, handleVisibility, handleAdd }) => {\r\n  const { formData, setFormData, handleInputChange } = useFormData();\r\n\r\n  async function handleSubmit(e) {\r\n    let { driverName, driverNickname, driverSeats } = formData;\r\n    e.preventDefault();\r\n    e.target.reset();\r\n    // TODO: Replace ID with template string\r\n    const res = await axios.post(\r\n      `http://${process.env.REACT_APP_HOST}/api/events/${process.env.REACT_APP_EVENT_ID}/drivers`,\r\n      {\r\n        name: driverName,\r\n        nickname: driverNickname,\r\n        seats: driverSeats,\r\n      }\r\n    );\r\n    const driverId = res.data;\r\n    setFormData({});\r\n    return handleAdd({ type: 'ADD_DRIVER', formData, driverId });\r\n  }\r\n\r\n  return (\r\n    <Modal isVisible={isVisible} handleVisibility={handleVisibility}>\r\n      <h1>Add Drivers</h1>\r\n      <form onSubmit={e => handleSubmit(e)}>\r\n        <label htmlFor=\"driverName\">Name: </label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"driverName\"\r\n          id=\"driverName_Add\"\r\n          value={formData.driverName || ''}\r\n          onChange={e => handleInputChange(e)}\r\n          required\r\n          maxLength=\"20\"\r\n        />\r\n        <label htmlFor=\"driverNickname\">Nickname (optional): </label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"driverNickname\"\r\n          id=\"driverNickname_Add\"\r\n          value={formData.driverNickname || ''}\r\n          onChange={e => handleInputChange(e)}\r\n          maxLength=\"20\"\r\n        />\r\n        <label htmlFor=\"driverSeats\">Number of available seats: </label>\r\n        <select\r\n          name=\"driverSeats\"\r\n          id=\"driverSeats_Add\"\r\n          value={formData.driverSeats}\r\n          onChange={e => handleInputChange(e)}\r\n          required\r\n        >\r\n          <option value=\"\">-</option>\r\n          <option value=\"1\">1</option>\r\n          <option value=\"2\">2</option>\r\n          <option value=\"3\">3</option>\r\n          <option value=\"4\">4</option>\r\n          <option value=\"5\">5</option>\r\n          <option value=\"6\">6</option>\r\n          <option value=\"7\">7</option>\r\n        </select>\r\n        <input type=\"submit\" value=\"Add\" />\r\n      </form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AddDriverModal;\r\n","import React from 'react';\r\nimport Modal from '../../../../reusable_components/Modal';\r\n\r\nconst LinkModal = ({isVisible, handleVisibility}) => {\r\n\treturn (\r\n\t\t<Modal \r\n\t\t\tisVisible={isVisible} \r\n\t\t\thandleVisibility={handleVisibility}\r\n\t\t>\r\n\t\t\t<div className=\"modalMessage\">\r\n\t\t\t\t<h1>Sit back and relax.</h1>\r\n\t\t\t\t<strong><a href=\"#\">https://thisfeatureisntreadyyet.com/work-in-progress</a></strong>\r\n\t\t\t\t<p>Share this link with your attendees to allow them to sign up on their own!</p>\r\n\t\t\t\t<p>No account needed.</p>\r\n\t\t\t\t<p>They can sign up as a driver or passenger to an existing car.</p>\r\n\t\t\t</div>\r\n\t\t</Modal>\r\n\t);\r\n}\r\n\r\nexport default LinkModal;\r\n","import React, { useEffect, useContext, useState } from 'react';\r\nimport Modal from '../../../../reusable_components/Modal';\r\nimport useFormData from '../../../../custom_hooks/useFormData';\r\nimport { CarpoolContext } from '../../../../context/GlobalState';\r\nimport axios from 'axios';\r\nconst host = process.env.REACT_APP_HOST;\r\nconst eventId = process.env.REACT_APP_EVENT_ID;\r\n\r\nconst EditDriverModal = ({ isVisible, handleVisibility, driver }) => {\r\n  const { formData, setFormData, handleInputChange } = useFormData();\r\n  const [isOverCapacity, setCapacityStatus] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // I use a && because the driver object is empty at first and causes an error if I dont include it\r\n    if (driver.passengers && formData.driverSeats < driver.passengers.length) {\r\n      setCapacityStatus(true);\r\n    } else {\r\n      setCapacityStatus(false);\r\n    }\r\n  }, [formData.driverSeats, driver.passengers]);\r\n\r\n  // This block is used for conditional rendering of the delete button\r\n  let occupied;\r\n  if (driver.passengers && driver.passengers.length > 0) {\r\n    occupied = true;\r\n  }\r\n\r\n  // Auto-fill the form with the selected driver's data\r\n  useEffect(\r\n    () =>\r\n      setFormData({\r\n        driverSeats: driver.totalSeats,\r\n      }),\r\n    [driver, setFormData]\r\n  );\r\n\r\n  const { updateDriverList } = useContext(CarpoolContext);\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    axios.put(`http://${host}/api/events/${eventId}/drivers/${driver.id}`, {\r\n      seats: formData.driverSeats,\r\n    });\r\n    setFormData({});\r\n    handleVisibility(false);\r\n    updateDriverList({\r\n      type: 'EDIT_DRIVER_SEATS',\r\n      driverId: driver.id,\r\n      formData,\r\n    });\r\n  }\r\n\r\n  function handleDeleteDriver() {\r\n    setFormData({});\r\n    handleVisibility(false); // Immediately close the modal for better UX\r\n    // TODO: Replace event_id with template string\r\n    axios.delete(`http://${host}/api/events/${eventId}/drivers/${driver.id}`);\r\n    updateDriverList({ type: 'DELETE_DRIVER', driverId: driver.id });\r\n  }\r\n\r\n  return (\r\n    <Modal isVisible={isVisible} handleVisibility={handleVisibility}>\r\n      <h1>Edit seat count</h1>\r\n      <form onSubmit={e => handleSubmit(e)}>\r\n        <label htmlFor=\"driverSeats\">Number of available seats:</label>\r\n        <select\r\n          name=\"driverSeats\"\r\n          id=\"driverSeats__Edit\"\r\n          defaultValue={driver.totalSeats}\r\n          value={formData.driverSeats}\r\n          onChange={handleInputChange}\r\n        >\r\n          <option value=\"1\">1</option>\r\n          <option value=\"2\">2</option>\r\n          <option value=\"3\">3</option>\r\n          <option value=\"4\">4</option>\r\n          <option value=\"5\">5</option>\r\n          <option value=\"6\">6</option>\r\n          <option value=\"7\">7</option>\r\n        </select>\r\n        {isOverCapacity && <p>You can't have less seats than passengers.</p>}\r\n        <input type=\"submit\" value=\"Update\" disabled={isOverCapacity} />\r\n        {occupied ? (\r\n          <p>To delete this driver, remove their passengers first.</p>\r\n        ) : (\r\n          <button type=\"button\" onClick={handleDeleteDriver}>\r\n            Delete Driver\r\n          </button>\r\n        )}\r\n      </form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default EditDriverModal;\r\n","import React, { useState, useContext } from 'react';\r\nimport DriverContainerStatus from './DriverContainerStatus';\r\nimport DriverCard from './DriverContainerCard';\r\nimport IconButton from '../../../reusable_components/IconButton';\r\nimport AddDriverModal from './modals/AddDriver';\r\nimport LinkModal from './modals/Link';\r\nimport EditDriverModal from './modals/EditDriver';\r\nimport { CarpoolContext } from '../../../context/GlobalState';\r\n\r\nconst DriverContainer = () => {\r\n\tconst [isAddingDriver, toggleAddModal] = useState(false);\r\n\tconst [isViewingRestLink, toggleRestLink] = useState(false);\r\n\tconst [isEditingDriver, toggleEditDriver] = useState(false);\r\n\tconst [driverBeingEdited, updateDriverBeingEdited] = useState({});\r\n\r\n\tconst { driverList, updateDriverList } = useContext(CarpoolContext);\r\n\r\n\treturn (\r\n\t\t<div className=\"planner__left\">\r\n\t\t\t<AddDriverModal\r\n\t\t\t\tisVisible={isAddingDriver}\r\n\t\t\t\thandleVisibility={toggleAddModal}\r\n\t\t\t\thandleAdd={updateDriverList}\r\n\t\t\t/>\r\n\t\t\t<LinkModal \r\n\t\t\t\tisVisible={isViewingRestLink}\r\n\t\t\t\thandleVisibility={toggleRestLink}\r\n\t\t\t/>\r\n\t\t\t<EditDriverModal \r\n\t\t\t\tisVisible={isEditingDriver}\r\n\t\t\t\thandleVisibility={toggleEditDriver}\r\n\t\t\t\tdriver={driverBeingEdited}\r\n\t\t\t/>\r\n\t\t\t<div className=\"drivers__header\">\r\n\t\t\t\t<h3>Manage Drivers</h3>\r\n\t\t\t\t<IconButton\r\n\t\t\t\t\ticon=\"link\"\r\n\t\t\t\t\thandleClick={() => toggleRestLink(true)}\r\n\t\t\t\t/>\r\n\t\t\t\t<IconButton \r\n\t\t\t\t\ticon=\"plus\"\r\n\t\t\t\t\thandleClick={() => toggleAddModal(true)}\t\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<DriverContainerStatus />\r\n\t\t\t<div className=\"drivers__container\">\r\n\t\t\t\t{driverList.columnOrder.map((columnId) => {\r\n\t\t\t\t\tconst driver = driverList.driverColumns[columnId];\r\n\t\t\t\t\tconst passengers = driver.passengerIds.map(passenger => driverList.passengerRows[passenger]);\r\n\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<DriverCard\r\n\t\t\t\t\t\t\tkey={columnId}\r\n\t\t\t\t\t\t\tid={columnId}\r\n\t\t\t\t\t\t\tname={driver.name}\r\n\t\t\t\t\t\t\tnickname={driver.nickname}\r\n\t\t\t\t\t\t\tpassengers={passengers}\r\n\t\t\t\t\t\t\ttotalSeats={driver.seats}\r\n\t\t\t\t\t\t\ttoggleEditDriver={toggleEditDriver}\r\n\t\t\t\t\t\t\tupdateDriverBeingEdited={updateDriverBeingEdited}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t</div>\r\n\t);\r\n}\r\n\r\nexport default DriverContainer;\r\n","import React, { useContext, useRef } from 'react';\r\nimport Modal from '../../../reusable_components/Modal';\r\nimport useFormData from '../../../custom_hooks/useFormData';\r\nimport { CarpoolContext } from '../../../context/GlobalState';\r\nimport axios from 'axios';\r\nconst host = process.env.REACT_APP_HOST;\r\nconst eventId = process.env.REACT_APP_EVENT_ID;\r\n\r\nexport default function AddPassengerModal({ isVisible, handleVisibility }) {\r\n  const { formData, setFormData, handleInputChange } = useFormData();\r\n  const { updateDriverList, driverList } = useContext(CarpoolContext);\r\n\r\n  // I use refs to improve the UX of this form by selectively resetting certain fields\r\n  const nameRef = useRef(null);\r\n  const nicknameRef = useRef(null);\r\n  let response;\r\n\r\n  async function handleAdd(e) {\r\n    e.preventDefault();\r\n    const driverId = formData.driverId;\r\n    const driver = driverList.driverColumns[driverId];\r\n    // I include this block to preserve part of the state if the car isn't full, for better UX\r\n    if (driver && driver.passengerIds.length === driver.seats) {\r\n      setFormData({});\r\n    } else {\r\n      setFormData({\r\n        driverId: formData.driverId,\r\n      });\r\n    }\r\n    nameRef.current.focus();\r\n    nameRef.current.value = '';\r\n    nicknameRef.current.value = '';\r\n\r\n    if (driverId) {\r\n      response = await axios.post(\r\n        `http://${host}/api/events/${eventId}/drivers/${driverId}`,\r\n        {\r\n          name: formData.passengerName,\r\n          nickname: formData.passengerNickname,\r\n        }\r\n      );\r\n    } else {\r\n      response = await axios.post(\r\n        `http://${host}/api/events/${eventId}/newpassenger`,\r\n        {\r\n          name: formData.passengerName,\r\n          nickname: formData.passengerNickname,\r\n        }\r\n      );\r\n    }\r\n\r\n    return updateDriverList({\r\n      type: 'ADD_PASSENGER',\r\n      name: formData.passengerName,\r\n      nickname: formData.passengerNickname,\r\n      driverId: formData.driverId,\r\n      passengerId: response.data._id,\r\n    });\r\n  }\r\n\r\n  // The dropdown for directly assigning to a driver card\r\n  const driverOptions = driverList.columnOrder.map(id => {\r\n    const driver = driverList.driverColumns[id];\r\n    const seatsTaken = driver.passengerIds.length;\r\n    const totalSeats = driver.seats;\r\n\r\n    // To only show drivers with free seats\r\n    if (seatsTaken < totalSeats) {\r\n      return (\r\n        <option value={driver.id} key={driver.id}>\r\n          {driver.name} ({driver.passengerIds.length}/{driver.seats})\r\n        </option>\r\n      );\r\n    }\r\n    return;\r\n  });\r\n\r\n  return (\r\n    <Modal isVisible={isVisible} handleVisibility={handleVisibility}>\r\n      <h1>Add riders</h1>\r\n      <form onSubmit={e => handleAdd(e)}>\r\n        <label htmlFor=\"passengerName\">Name:</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"passengerName\"\r\n          id=\"passengerName\"\r\n          value={formData.name}\r\n          onChange={handleInputChange}\r\n          maxLength=\"20\"\r\n          ref={nameRef}\r\n          required\r\n        />\r\n        <label htmlFor=\"passengerNickname\">Nickname (optional):</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"passengerNickname\"\r\n          id=\"passengerNickname\"\r\n          value={formData.nickname}\r\n          onChange={handleInputChange}\r\n          ref={nicknameRef}\r\n          maxLength=\"20\"\r\n        />\r\n        <label htmlFor=\"driverId\">Directly assign to car (optional):</label>\r\n        <select name=\"driverId\" id=\"driverId\" onChange={handleInputChange}>\r\n          <option value=\"\">none</option>\r\n          {driverOptions}\r\n        </select>\r\n        <button type=\"submit\">Add</button>\r\n      </form>\r\n    </Modal>\r\n  );\r\n}\r\n","import React, { useContext, useState } from 'react';\r\nimport PassengerContainer from '../PassengerContainer';\r\nimport { CarpoolContext } from '../../../context/GlobalState';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport IconButton from '../../../reusable_components/IconButton';\r\nimport AddPassengerModal from './AddPassengerModal';\r\nimport findPassengerColumnId from '../../../helpers/findPassengerColumnId';\r\n\r\nconst Passengers = () => {\r\n  const { updateDriverList, driverList } = useContext(CarpoolContext);\r\n  const [isAddingPassenger, toggleAddPassenger] = useState(false);\r\n  const drivers = driverList.driverColumns;\r\n  const passengerPoolId = findPassengerColumnId(drivers);\r\n  const passengerIds = driverList.driverColumns[passengerPoolId].passengerIds;\r\n  const passengerData = passengerIds.map(id => driverList.passengerRows[id]);\r\n\r\n  return (\r\n    <div className=\"passengersContainer\">\r\n      <AddPassengerModal\r\n        isVisible={isAddingPassenger}\r\n        handleVisibility={toggleAddPassenger}\r\n      />\r\n      <div className=\"passengersContainer__header\">\r\n        <h3>Unassigned Riders</h3>\r\n        <IconButton icon=\"plus\" handleClick={() => toggleAddPassenger(true)} />\r\n      </div>\r\n      <Droppable droppableId={passengerPoolId}>\r\n        {(provided, snapshot) => (\r\n          <PassengerContainer\r\n            {...provided.droppableProps}\r\n            innerRef={provided.innerRef}\r\n            handleUpdate={updateDriverList}\r\n            passengers={passengerData}\r\n            placeholder={provided.placeholder}\r\n            driverId={passengerPoolId}\r\n            isDraggingOver={snapshot.isDraggingOver}\r\n          />\r\n        )}\r\n      </Droppable>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Passengers;\r\n","import React, { useContext } from 'react';\r\nimport DriverContainer from './driverPanel/DriverContainer';\r\nimport UnassignedContainer from './passengerPanel/UnassignedContainer';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\nimport { CarpoolContext } from '../../context/GlobalState';\r\nimport axios from 'axios';\r\nimport passengerArray from '../../helpers/passengerArray';\r\nconst host = process.env.REACT_APP_HOST;\r\nconst eventId = process.env.REACT_APP_EVENT_ID;\r\n\r\n// import IconButton from '../reusable/IconButton';\r\n// import Navbar from '../reusable/Navbar';\r\n\r\n// TODO:\r\n// Clean up the code and organization\r\n// DRY\r\n\r\nconst Planner = () => {\r\n  const { driverList, updateDriverList } = useContext(CarpoolContext);\r\n\r\n  const onDragEnd = result => {\r\n    const { source, destination, draggableId } = result;\r\n    const start = source.droppableId;\r\n    const end = destination && destination.droppableId;\r\n\r\n    // Outside drops\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    // Drop in same place\r\n    if (end === start && destination.index === source.index) {\r\n      return;\r\n    }\r\n\r\n    // Drop in a different list\r\n    if (start !== end) {\r\n      updateDriverList({\r\n        type: 'TRANSFER',\r\n        source,\r\n        destination,\r\n        draggableId,\r\n      });\r\n      const { sourcePassengers, destPassengers } = passengerArray(\r\n        start,\r\n        end,\r\n        driverList\r\n      );\r\n      axios.put(`http://${host}/api/events/${eventId}/drivers/transfer`, {\r\n        sourcePassengers,\r\n        destPassengers,\r\n        startId: start,\r\n        destId: end,\r\n      });\r\n      return;\r\n    }\r\n\r\n    updateDriverList({\r\n      type: 'REORDER_PASSENGERS',\r\n      source,\r\n      destination,\r\n      draggableId,\r\n    });\r\n\r\n    const { sourcePassengers, destPassengers } = passengerArray(\r\n      start,\r\n      end,\r\n      driverList\r\n    );\r\n\r\n    axios.put(`http://${host}/api/events/${eventId}/drivers/${start}/reorder`, {\r\n      sourcePassengers,\r\n      destPassengers,\r\n      startId: start,\r\n      destId: end,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* <Navbar /> */}\r\n      <div className=\"longTermPlanner\">\r\n        <p>\r\n          Ice Skating With Friends | February 12th, 2020 | 6:00pm{' '}\r\n          {/* <span><IconButton icon=\"user-edit\"/></span> */}\r\n        </p>\r\n        <div className=\"longTermPlanner__cards\">\r\n          <DragDropContext onDragEnd={onDragEnd}>\r\n            <DriverContainer />\r\n            <UnassignedContainer />\r\n          </DragDropContext>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Planner;\r\n","import React from 'react';\r\nimport Planner from './routes/planner/Planner';\r\nimport GlobalState from './context/GlobalState';\r\n// Eventually, this app will house your many routes\r\n\r\nfunction App() {\r\n  return (\r\n\t\t<GlobalState>\r\n\t\t\t<Planner />\r\n\t\t</GlobalState>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './sass/main.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport {\r\n  faTrash,\r\n  faUserEdit,\r\n  faLink,\r\n  faPlus,\r\n  faTimes,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nconsole.log(process.env.REACT_APP_TEST);\r\n\r\nlibrary.add(faTrash, faUserEdit, faLink, faPlus, faTimes);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}